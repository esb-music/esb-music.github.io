{"version":3,"sources":["assets/start-screen.png","assets sync /^/.//.*//albums/.json$","assets sync /^/.//.*//instruments/.json$","assets sync /^/.//.*//musicians/.json$","assets sync /^/.//.*//tracks/.json$","components/search-bar/search-bar.js","components/navigation-bar/nav-section/nav-section.js","components/navigation-bar/navigation.js","scripts/constants.js","scripts/helpers.js","components/timeline/timeline-item/timeline-item.js","repository/albumRepository.js","repository/instrumentRepository.js","repository/musicianRepository.js","repository/trackRepository.js","service/AlbumService.js","service/InstrumentService.js","service/MusicianService.js","service/TrackService.js","components/timeline/triangle/triangle.js","components/timeline/timeline.js","components/album-graph/tooltip/musician-tooltip.js","components/album-graph/tooltip/album-tooltip.js","components/album-graph/tooltip/instrument-tooltip.js","components/album-graph/graph-styles/GraphStyles.js","components/album-graph/graph.js","components/album-graph/track-display.js","presentation/converter.js","routes/album-route/album-route.js","routes/home-route/home-route.js","routes/search-route/menu/menu.js","routes/search-route/search-route.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","display","breakpoints","up","search","position","borderRadius","shape","backgroundColor","fade","palette","common","white","marginLeft","width","searchIcon","height","pointerEvents","alignItems","justifyContent","inputRoot","color","inputInput","padding","transition","transitions","create","SearchAppBar","props","classes","className","AppBar","Toolbar","back","IconButton","onClick","onNavbarButtonPress","edge","aria-label","Typography","variant","noWrap","name","InputBase","onSubmit","event","alert","placeholder","type","input","onKeyDown","key","target","value","switchToSearch","inputProps","NavigationSection","getElementToRender","MenuItem","handleOnSectionClick","Box","fontSize","getAllTitles","elements","i","data","length","push","convertTitle","charAt","toUpperCase","substring","this","style","fontWeight","Fragment","Component","NavigationBar","showTrackDisplay","showAlbumsDisplay","showMusicianDisplay","showInstrumentDisplay","type1","type2","data1","data2","albumWidthTimeline","getReleaseDateFromAlbum","album","released","lut","Array","fill","_","toString","getRandomValuesFunc","window","crypto","getRandomValues","dvals","Uint32Array","d0","d1","d2","d3","Math","random","uuid","formatUuid","validURL","url","RegExp","test","getDistanceBetweenAlbums","album1","album2","timeStamp","Date","getTime","timestamp","abs","TimelineItem","digIntoAlbum","switchToAlbum","_isActive","highlighted","state","mouseEntered","icon","date","itemId","activeNormal","activeHovered","itemClass","containerClass","onMouseEnter","setState","onMouseLeave","backgroundImage","backgroundSize","showTooltip","Tooltip","placement","isOpen","src","alt","paddingTop","getFullYear","getReleasedYearFromDate","config","require","albums","albumRepository","getAll","allAlbums","validated","label","recorded","filter","studios","producers","musicians","instruments","instrumentRepository","allInstruments","instrument","musicianRepository","allMusicians","element","musician","birthdate","deathdate","tracks","trackRepository","allTracks","track","validAlbums","albumsName","newValues","values","ref","validatedAlbums","albumService","getFirstAlbum","getAlbumWithMusician","musicianName","includes","getByName","getMusiciansOfAlbum","forEach","mus","musicianService","elem","getAllContainingSubstring","query","instrumentService","filtered","getMusiciansOfInstrument","found","err","console","error","getInstrumentsNamesOfMusician","getAlbumsNamesOfMusician","getAlbumsOfMusician","albObjects","alb","log","trackService","getAllTracksOfAlbum","getMusicianInstrumentRelations","trackName","albumName","relations","convertedRel","entries","Triangle","left","right","triangleClass","Timeline","moveTimelineItems","timelineRef","current","isAlbumOnScreen","albumPos","positions","visibleLen","clientWidth","isAlbumRight","diff","scrollLeft","leftPos","getAllAlbumComponents","timeline","keyCounter","paddingLeft","distance","stroke","strokeWidth","x1","y1","x2","y2","album3","paddingRight","_handleLeftClick","_handleRightClick","highlithed","React","createRef","move","moveEnd","forceUpdate","flexDirection","alignSelf","MusicianTooltip","imgBlock","href","AlbumTooltip","class","InstrumentTooltip","albumEdge","selector","musicianEdge","instrumentEdge","trackEdge","instrumentNode","content","nodeStyle","initial","string","names","split","initials","getInitials","svgImage","encodeURI","musicianStyle","albumStyle","instrumetStyle","Cytoscape","use","popper","coseBilkent","Graph","handleSpecialPerspective","handleNodeClick","node","handleInstrumentsPerspectiveClicks","handleAlbumPerspectiveClicks","handleMusiciansPerspectiveClicks","hideInstrumentDisplay","hideMusicianDisplay","getTooltipByOfNode","renderToString","callCount","selectedSize","musiciansStyle","JSON","parse","stringify","getMusicianStyle","getAlbumStyle","instrumentStyle","getInstrumentStyle","stylesheet","cy","layout","spacingFactor","run","unbind","bind","evt","dummyDomEle","document","createElement","popperRef","tip","tippy","appendTo","body","flip","interactive","sticky","animation","arrow","plugins","trigger","lazy","onCreate","instance","popperInstance","reference","innerHTML","popperOptions","positionFixed","show","selected","$","handleCollection","unselect","minZoom","maxZoom","TrackDisplay","getContent","switchToMusician","relation","index","instrumentName","musicianAvatar","hideDelay","duration","hideOnClick","html","round","size","instrumentAvatar","getTooltip","hideTrackDisplay","faTimes","musNotFilter","instNotFilter","Set","getCytoAlbum","getCytoMusician","getCytoInstrument","getCytoTrack","getEdge","source","destination","getCompoundForAlbums","nodes","commonMusicians","reduce","accumulator","array","edges","flatMap","albumMusicianEdges","getCompoundForMusicians","commonAlbums","AlbumRoute","backToMusisian","moveTimeline","getTracksOfAlbum","history","setCurrentAlbum","perspective","pushToNavigationStack","navigationStack","saveContext","navigateBack","lastState","pop","albumState","collapseNavbar","specialCaseFunction","showAlbums","queryString","location","n","m","active","timelineData","sort","a","b","collapseClass","instObjects","instr","convMus","convInstr","convAlb","getMusicianPerspective","convMusic","getInstrumentPerspective","convAlbum","convTracks","convTrack","convMusician","getAlbumPerspective","button","marginTop","top","withRouter","HomeRoute","getApplicationContainer","image","getJumbotron","role","getNavigationBar","data-toggle","data-target","aria-controls","aria-expanded","getCredits","getFooter","showHome","StyledMenuItem","withStyles","primary","main","margin","CustomizedMenus","menuItems","item","changeMenuItem","ListItemText","Badge","pill","count","getMenuListItems","SearchRoute","chooseFilterType","processSearch","showSearchScreen","q","goBack","App","showSearch","path","render","Boolean","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a57bcb69.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/start-screen.0982db5e.png\";","var map = {\n\t\"./cream-dataset/albums.json\": 207,\n\t\"./miles-dataset/albums.json\": 208\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 206;","var map = {\n\t\"./cream-dataset/instruments.json\": 210,\n\t\"./miles-dataset/instruments.json\": 211\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 209;","var map = {\n\t\"./cream-dataset/musicians.json\": 213,\n\t\"./miles-dataset/musicians.json\": 214\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 212;","var map = {\n\t\"./cream-dataset/tracks.json\": 216,\n\t\"./miles-dataset/tracks.json\": 217\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 215;","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport InputBase from '@material-ui/core/InputBase';\nimport { fade, makeStyles } from '@material-ui/core/styles';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport SearchIcon from '@material-ui/icons/Search';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n    display: 'none',\n    [theme.breakpoints.up('sm')]: {\n      display: 'block',\n    },\n  },\n  search: {\n    position: 'relative',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    '&:hover': {\n      backgroundColor: fade(theme.palette.common.white, 0.25),\n    },\n    marginLeft: 0,\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      marginLeft: theme.spacing(1),\n      width: 'auto',\n    },\n  },\n  searchIcon: {\n    width: theme.spacing(7),\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  inputRoot: {\n    color: 'inherit',\n  },\n  inputInput: {\n    padding: theme.spacing(1, 1, 1, 7),\n    transition: theme.transitions.create('width'),\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      width: 120,\n      '&:focus': {\n        width: 200,\n      },\n    },\n  },\n}));\n\nexport default function SearchAppBar(props) {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          {!props.back ?          \n            <IconButton\n              onClick={props.onNavbarButtonPress}\n              edge=\"start\"\n              className={classes.menuButton}\n              color=\"inherit\"\n              aria-label=\"open drawer\">\n                <MenuIcon />\n            </IconButton>  \n            : <IconButton\n              onClick={props.onNavbarButtonPress}\n              edge=\"start\"\n              className={classes.menuButton}\n              color=\"inherit\"\n              aria-label=\"back\">\n                <ArrowBackIcon />\n            </IconButton>\n          }\n          <Typography className={classes.title} variant=\"h6\" noWrap>\n            {props.name}\n          </Typography>\n          <div className={classes.search}>\n            <div className={classes.searchIcon}>\n              <SearchIcon />\n            </div>\n            <InputBase\n              onSubmit={event => alert('hello')}\n              placeholder=\"Search…\"\n              type=\"input\"\n              classes={{\n                root: classes.inputRoot,\n                input: classes.inputInput,\n              }}\n              onKeyDown={e => {\n                if(e.key === 'Enter' && e.target.value !== '') {\n                  props.switchToSearch(e.target.value);\n                }\n              }}\n              inputProps={{ 'aria-label': 'search' }}\n            />\n          </div>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n  ","import React, { Component } from 'react';\nimport './nav-section.css';\nimport Box from '@material-ui/core/Box';\nimport MenuItem from '@material-ui/core/MenuItem';\n/**\n * section to display all menu items\n * @author Pavlo Rozbytskyi\n */\nexport default class NavigationSection extends Component {\n  /**\n   * rendering menu element\n   */\n  getElementToRender = (name, key) => {\n    return (\n      <div key={key} className=\"list-element\">\n        <MenuItem onClick={() => this.props.handleOnSectionClick(name, this.props.type)}>\n          <Box fontSize={18}>\n            {name}\n          </Box>\n        </MenuItem>\n      </div>\n    )\n  }\n  /**\n   * getting all titles to render\n   */\n  getAllTitles = () => {\n    var elements = [];\n\n    for(var i = 0; i < this.props.data.length; i++){\n      elements.push(this.getElementToRender(this.props.data[i], i));\n    }\n\n    return elements;\n  }\n  /**\n   * @param {string} name passed title\n   * converting old title to new title format: title -> Titles\n   */\n  convertTitle = (name) => {\n    if(name){\n      return `${name.charAt(0).toUpperCase()}${name.substring(1)}s`;\n    }\n    return \"Titles\";\n  }\n  render() {\n    const {style, type} = this.props;\n    const title = this.convertTitle(type);\n\n    return (\n      <div className=\"navigation-element\" style={style}>\n        <Box fontSize={18} fontWeight=\"600\" style={{padding: 10}}>\n          {title}\n        </Box>\n        <React.Fragment key=\"getIdFromName\">\n          {/* <div style={{overflowX: 'hide'}}> */}\n          {this.getAllTitles()}\n        </React.Fragment>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport './navigation.css';\nimport NavigationSection from './nav-section/nav-section';\n\nexport default class NavigationBar extends Component {\n  /**\n   * handle click on menu item of different types\n   */\n  handleOnSectionClick = (name, type) => {\n    switch(type){\n      case \"track\": \n        this.props.showTrackDisplay(name);\n        break;\n      case \"album\": \n        this.props.showAlbumsDisplay(name);\n        break;\n      case \"musician\": \n        this.props.showMusicianDisplay(name);\n        break;\n      case \"instrument\": \n        this.props.showInstrumentDisplay(name);\n        break;\n      default: \n        break;\n    }\n  }\n\n  render() {\n    const { type1, type2, data1, data2 } = this.props;\n    {/* <div className=\"navigation-container\"> */}\n\n    return (\n        <div className=\"navigation-container\">\n        <NavigationSection \n          data={data1} \n          type={type1}\n          handleOnSectionClick={this.handleOnSectionClick}/>\n        \n        {type2 !== '' ? \n          (\n            <NavigationSection \n              data={data2} \n              type={type2}\n              handleOnSectionClick={this.handleOnSectionClick}/>\n          ) : null}\n      </div>\n    );\n  }\n}\n","export const pixelsPerYear = 50;  \nexport const albumWidthTimeline = 110;  ","import {pixelsPerYear} from './constants';\n\n// extracting release date from album\nexport const getReleaseDateFromAlbum = (album) => {\n    if(album){\n\t\t\treturn album.released;\n    }\n    return '';\n}\n/**lookup table*/\nconst lut = Array(256).fill().map((_, i) => (i < 16 ? '0' : '') + (i).toString(16));\n/**formatting uuid */\nconst formatUuid = ({d0, d1, d2, d3}) =>\n  lut[d0 & 0xff] + lut[(d0 >> 8) & 0xff] + lut[(d0 >> 16) & 0xff] + lut[(d0 >> 24) & 0xff] + '-' +\n  lut[d1 & 0xff] + lut[(d1 >>  8) & 0xff] + '-' +\n  lut[((d1 >> 16) & 0x0f) | 0x40] + lut[(d1 >> 24) & 0xff] + '-' +\n  lut[(d2 & 0x3f) | 0x80] + lut[(d2 >>  8) & 0xff] + '-' +\n  lut[(d2 >> 16) & 0xff] + lut[(d2 >> 24) & 0xff] +\n  lut[d3 & 0xff] + lut[(d3 >> 8) & 0xff] +\n  lut[(d3 >> 16) & 0xff] + lut[(d3 >> 24) & 0xff];\n/**getting valued for uuid */\nconst getRandomValuesFunc = window.crypto && window.crypto.getRandomValues ?\n  () => {\n    const dvals = new Uint32Array(4);\n    window.crypto.getRandomValues(dvals);\n    return {\n      d0: dvals[0],\n      d1: dvals[1],\n      d2: dvals[2],\n      d3: dvals[3],\n    };\n  } :\n  () => ({\n    d0: Math.random() * 0x100000000 >>> 0,\n    d1: Math.random() * 0x100000000 >>> 0,\n    d2: Math.random() * 0x100000000 >>> 0,\n    d3: Math.random() * 0x100000000 >>> 0,\n  });\n/**RFC compliant getting unique uuid numbers */\nexport const uuid = () => formatUuid(getRandomValuesFunc());\n\n/**\n * checking valid url\n * @param {String} url \n */\nexport const validURL = url => {\n  var pattern = new RegExp('^(https?:\\\\/\\\\/)?'+ // protocol\n    '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|'+ // domain name\n    '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))'+ // OR ip (v4) address\n    '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*'+ // port and path\n    '(\\\\?[;&a-z\\\\d%_.~+=-]*)?'+ // query string\n    '(\\\\#[-a-z\\\\d_]*)?$','i'); // fragment locator\n  return !!pattern.test(url);\n}\n// converting timestamp to years \nexport const convertTimestampToYears = (timestamp) => {\n    if(timestamp)\n        return Math.abs(timestamp / (1000 * 60 * 60 * 24 * 365)); \n    return 0;\n}\n// extracting release date from album\nexport const getDistanceBetweenAlbums = (album1, album2) => {\n    if(album1 && album2){\n        var timeStamp = new Date(getReleaseDateFromAlbum(album1)).getTime() - \n            new Date(getReleaseDateFromAlbum(album2)).getTime();\n        return convertTimestampToYears(timeStamp) * pixelsPerYear;\n    } \n    return 0;\n}\n\nexport const getIdFromName = (name) => {\n    return name.replace(/:/g, '_')\n      .replace(/\\s/g, '_')\n      .replace(/,/g, '')\n      .replace(/\\//g, '')\n      .replace(/'/g, '')\n      .replace(/`/g, '_')\n      .replace(/-/g, '_')\n      .replace(/\\./g, '_');\n}\n\nexport const getReleasedYearFromDate = (date) => {\n  return new Date(date).getFullYear();\n}\n\n  /**\n   * update current albums if change occured\n   * @param {Array} prev - previous musicians\n   * @param {Array} current - current musicians to render\n   * @param {Number} maxIndex - max id of element\n   */\nexport const diffAlbums = (prev, current, maxIndex) => {\n  var curr = current.map(mus => mus[0]);\n  //getting compound musicians for previous album and new album\n  var compound = prev.filter(mus => curr.includes(mus.data.label));\n  // don't perform anything if no data changed\n  if(compound.length === prev.length)\n    return;\n  var coumpoundMaped = compound.map(mus => mus.data.label);\n  var newData = curr.filter(mus => !coumpoundMaped.includes(mus));\n  var newDataMaped = newData.map(name => {\n    return {data: {id: ++maxIndex, label: name}}\n  });\n  var elements = [...compound, ...newDataMaped];\n  return {maxIndex: maxIndex, elements: elements};\n}\n\n/**\n * getting initials\n * @param {String} string\n */\nexport const getInitials = (string) => {\n  var names = string.split(' '),\n  initials = names[0].substring(0, 1).toUpperCase();\n\n  if (names.length > 1) {\n    initials += names[names.length - 1].substring(0, 1).toUpperCase();\n  }\n  return initials;\n}","import React, { Component } from 'react';\nimport './timeline-item.css';\nimport { Tooltip } from 'reactstrap';\nimport {getReleasedYearFromDate} from '../../../scripts/helpers';\n\nexport default class TimelineItem extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n        mouseEntered: false,\n    };\n  }\n  \n  digIntoAlbum = () => {\n    const {name} = this.props;\n    this.props.switchToAlbum(name);\n  }\n\n  _isActive = (name) => {\n    if(name === this.props.highlighted)\n      return true;\n    return false;\n  }\n\n  render() {\n    const { icon, name, date, style, itemId} = this.props;\n    const activeNormal = this._isActive(name) ? \"item-container-active\" : \"\";\n    const activeHovered = this._isActive(name) ? \"item-container-hovered-active\" : \"\";\n\n    const itemClass = this.state.mouseEntered ? `item-container-hovered box-shadow ${activeHovered}` : `item-container box-shadow ${activeNormal}`\n    const containerClass = this.state.mouseEntered ? \"vertical-timeline-custom move-top\" : \"vertical-timeline-custom\"\n\n    return (\n      <div key={itemId} className={containerClass} style={style}>\n        {/* album container start */}\n        <div \n          onClick={this.digIntoAlbum}\n          onMouseEnter={() => this.setState({mouseEntered: !this.state.mouseEntered})} \n          onMouseLeave={() => this.setState({mouseEntered: !this.state.mouseEntered})}\n          className={itemClass}\n          style={{backgroundImage: `url(${icon})`, backgroundSize: 'contain'}}>\n          {/* start information about each album */}\n          {this.props.showTooltip ? \n            <Tooltip style={{borderRadius: 10,}} placement=\"left\" isOpen={this.state.mouseEntered} target={itemId}>\n              <div className=\"information-container\">\n                <img src={icon} alt=\"album\" width={150}/>\n                <p style={{paddingTop: 10}}>{name}</p>\n                <p>{date}</p>\n              </div>\n            </Tooltip> : null\n          }\n         \n          {/* end information about each album */}\n        </div>\n        {/* album container start */}\n\n        {/* date start */}\n        <div>\n          <p className=\"lead\">{getReleasedYearFromDate(date)}</p>\n        </div>\n        {/* date end */}\n    </div>\n    );\n  }\n}\n","import {validURL} from '../scripts/helpers';\n\nvar config = require('../assets/config.json');\nvar albums = require(`../assets/${config[\"dataset_directory\"]}/albums.json`);\n/**\n * @author Pavlo Rozbytskyi\n * @version 2.0.0\n * album Data Access Object layer provides basic read functionality  \n */\nclass AlbumRepository {\n  /**\n   * getting and validating all albums from the file\n   * \n   * album objects have following properties\n   * {String} id - albums name \n   * {String} url - url to e.g. wikipedia or another website\n   * {String} icon - url to musicians picture, which should be displayed\n   * {String} label - label which published the album\n   * {String} released - release date\n   * {Array} recorded - array with the recording dates\n   * {Array} studios - studios, where the album is recorded\n   * {Array} producers - producers of the album\n   * {Array} musicians - musicians played on the album\n   */\n  constructor() {\n    this.allAlbums = albums\n      .map(album => {\n        // validating data from the file\n        var validated = {};\n        // skip the album if name inconsistent\n        if(!album || album.id === \"\"){\n          return null;\n        }\n        validated.id = album.id;\n        // checking valid url\n        if(validURL(album.url)){\n          validated.url = album.url;\n        }else{\n          validated.url = \"\";\n        }\n        // checking valid icon url\n        if(validURL(album.icon)){\n          validated.icon = album.icon;\n        }else{\n          validated.icon = \"\";\n        }\n        // check label\n        if(!album.label){\n          validated.label = \"\";\n        }\n        validated.label = album.label;\n        // checking release date\n        if(album.released === null){\n          validated.released = \"\";\n        }else{\n          validated.released = album.released;\n        }\n        // checking record dates array\n        if(album.recorded === null){\n          validated.recorded = [];\n        }else{\n          validated.recorded = album.recorded.filter(e => e !== null); \n        }\n        // checking studios array\n        if(album.studios === null){\n          validated.studios = [];\n        }else{\n          validated.studios = album.studios.filter(e => e !== null); \n        }\n        // checking producers array\n        if(album.producers === null){\n          validated.producers = [];\n        }else{\n          validated.producers = album.producers.filter(e => e !== null); \n        }\n        // checking musicians array\n        if(album.musicians === null){\n          validated.musicians = [];\n        }else{\n          validated.musicians = album.musicians.filter(e => e !== null); \n        }\n\n        return validated;\n      })\n      .filter(album => album !== null); //filtering inconsistent objects out\n    // this.allAlbums = albums.map(elem => {\n    //   var obj = {};\n    //   obj[0] = elem.id;\n    //   obj[1] = {\n    //     url: elem.url,\n    //     icon: elem.icon,\n    //     label: elem.label,\n    //     released: elem.released,\n    //     recorded: elem.recorded,\n    //     studios: elem.studios,\n    //     producers: elem.producers,\n    //     musicians: elem.musicians,\n    //   };\n    //   return obj;\n    // });\n  }\n  /**\n   * getting all albums\n   */\n  getAll = () => {\n    return this.allAlbums;\n  }\n}\n\nexport const albumRepository = new AlbumRepository();","import {validURL} from '../scripts/helpers';\n\nvar config = require('../assets/config.json');\nvar instruments = require(`../assets/${config[\"dataset_directory\"]}/instruments.json`);\n/**\n * @author Pavlo Rozbytskyi\n * @version 2.0.0 - added data validation \n * instruments repository layer provides basic read functionality  \n */\nclass InstrumentRepository {\n    /**\n     * gettig all instrument objects from the file\n     * \n     * instrument objects have following properties\n     * {String} id - instruments name \n     * {String} url - link to the image\n     * {Array} musicians - musicians played on the instrument\n     */\n    constructor () {\n      this.allInstruments = instruments\n      // validation all instruments data\n        .map(instrument => {\n          var validated = {};\n          // returning null if instrument not exist or name is invalid\n          if(!instrument || instrument.id === \"\"){\n            return null; \n          }\n          validated.id = instrument.id;\n          // validating url of the image\n          if(!validURL(instrument.url)){\n            validated.url = \"\";\n          }else{\n            validated.url = instrument.url;\n          }\n          // validating musicians played on this instrument\n          if(!instrument.musicians){\n            validated.musicians = [];\n          }else{\n            // filter out all invalid musicians\n            validated.musicians = instrument.musicians\n              .filter(e => e !== null && e !== \"\");\n          }\n          //retur validated instrument\n          return validated;\n        })\n        // filtering invalid instruments out\n        .filter(instrument => instrument !== null); \n    }\n    /**\n    * getting all musicians\n    **/ \n    getAll = () => {\n      return this.allInstruments;\n\n      // return instruments.map(elem => {\n      //   var obj = {};\n      //   obj[0] = elem.id;\n      //   obj[1] = {\n      //     musicians: elem.musicians,\n      //     url: elem.url\n      //   };\n      //   return obj;\n      // });\n    }\n}\n\nexport const instrumentRepository = new InstrumentRepository();","import {validURL} from '../scripts/helpers';\n\nvar config = require('../assets/config.json');\nvar musicians = require(`../assets/${config[\"dataset_directory\"]}/musicians.json`);\n/**\n * @author Pavlo Rozbytskyi\n * @version 2.0.0\n * musicians Data Access Object layer provides basic read functionality  \n */\nclass MusicianRepository {\n  /**\n   * gettig all musician objects from the file\n   * \n   * musician objects have following properties\n   * {String} id - Musicians name \n   * {String} url - url to e.g. wikipedia or another website\n   * {String} icon - url to musicians picture, which should be displayed\n   * {Array} albums - albums names where this musician played \n   * {Array} instruments - instruments names which this musician played on\n   * {String} birthdate - birthdate of the musician \n   * {String} deathdate - deathdate of the musician\n   */\n  constructor() {\n    this.allMusicians = musicians.map(element => {\n      var musician = {};\n\n      // checking correct musician name, if not the object is broken\n      if(!element || element.id === \"\"){\n        return null; \n      }\n      musician.id = element.id;\n\n      // checking valid url\n      if(validURL(element.url)){\n        musician.url = element.url;\n      }else{\n        musician.url = \"\";\n      }\n      \n      // checking valid icon url\n      if(validURL(element.icon)){\n        musician.icon = element.icon;\n      }else{\n        musician.icon = \"\";\n      }\n      // checking albums \n      if(element.albums === null){\n        musician.albums = [];\n      }else{\n        musician.albums = element.albums.filter(e => e !== null && e !== \"\");;\n      }\n      // checking instruments\n      if(element.instruments === null){\n        musician.instruments = [];\n      }else{\n        musician.instruments = element.instruments.filter(e => e !== null && e !== \"\");;\n      }\n      // checking birthdate\n      if(element.birthdate === null){\n        musician.birthdate = \"\";\n      }else{\n        musician.birthdate = element.birthdate;\n      }\n      // checking deathdate\n      if(element.deathdate === null){\n        musician.deathdate = \"\";\n      }else{\n        musician.deathdate = element.deathdate;\n      }\n      \n      return musician;\n    });\n    // filter out all inconsistent musicians\n    this.allMusicians.filter(e => e !== null && e !== \"\");\n  }\n  getAll = () => {\n    return this.allMusicians;\n  }\n}\n\nexport const musicianRepository = new MusicianRepository()","// var tracks = require('../assets/cream-dataset/tracks.json');\nvar config = require('../assets/config.json');\nvar tracks = require(`../assets/${config[\"dataset_directory\"]}/tracks.json`);\n\n/**\n * @author Pavlo Rozbytskyi\n * @version 2.0.0 added data validation\n * tracks Data Access Object layer provides basic read functionality  \n */\nclass TrackRepository {\n  /**\n   * gettig all track objects from the file\n   * \n   * track objects have following properties\n   * {String} id - track name \n   * {String} albums - albums where the track is in\n   */\n  constructor () { \n    this.allTracks = tracks\n      // validate all tracks\n      .map(track => { \n        var validated = {};\n        // returning null if track not exist or the name is invalid\n        if(!track || track.id === \"\"){\n          return null; \n        }\n        validated.id = track.id;\n        // validating albums array\n        if(!track.albums){\n          validated.albums = [];\n        }else{\n          var validAlbums = track.albums\n            .filter(e => e !== null)\n            .map(albums => {\n              // validate albums name\n              var albumsName = Object.keys(albums)[0];\n\n              if(!albumsName || albumsName === \"\"){\n                return null;\n              }\n              // validate references\n              var newValues = Object.values(albums)[0]\n                .filter(ref => {\n                  // checking reference - musician to instrument exists\n                  if(!ref){\n                    return false;\n                  }\n                  //getting musician and instrument name from the reference\n                  var musician = Object.keys(ref)[0];\n                  var instrument = ref[musician];\n                  if(!musician || !instrument || musician === \"\" || instrument  === \"\"){\n                    return false;\n                  }\n                  return true;\n                });\n              var validatedAlbums = {};\n              validatedAlbums[albumsName] = newValues;\n              return validatedAlbums;\n            })\n            .filter(e => e && e !== null);\n          validated.albums = validAlbums;\n        }\n        return validated;\n      })\n      // filter invalid tracks out\n      .filter(track => track && track !== null);\n    // this.allTracks = tracks.map(element => { \n    //   var obj = {};\n    //   obj[0] = element.id;\n    //   obj[1] = {\n    //     albums: element.albums\n    //   }\n    //   return obj;\n    // });\n  }\n  getAll = () => {\n    return this.allTracks;\n  }\n}\n\nexport const trackRepository = new TrackRepository();","import { albumRepository } from '../repository';\nimport { musicianService } from '.';\n/**\n * @author Pavlo Rozbytskyi\n * album service layer extends basic functionality from album repository\n */\nclass AlbumService {\n  /**\n   * getting first album or null if there aren't any albums in the file\n   */\n  getFirstAlbum = () => {\n    var albums = albumRepository.getAll();\n    return albums.length > 0 ? albums[0] : null;\n  }\n  /**\n   * getting first album where is given musician present or null of nowhere\n   * @param {String} musicianName - musician's name\n   */\n  getAlbumWithMusician = (musicianName) => {\n    var albums = albumRepository\n      .getAll()\n      .filter(album => album.musicians.includes(musicianName));\n\n    return albums.length > 0 ? albums[0] : null;\n  }\n  /**\n   * getting album by name or null of it don't exist\n   * @param {String} name - album name\n   */\n  getByName = (name) => {\n    var albums = albumRepository.getAll().filter(album => album.id === name);\n    return albums.length > 0 ? albums[0] : null;\n  }\n\n  /**\n   * getting all musicians of current album\n   * @param album - current album\n   */\n  getMusiciansOfAlbum = (album) => {\n    var musicians = [];\n    //interrupt function if album is null\n    if(!album){\n      return musicians;\n    }\n    album.musicians.forEach(mus => {\n      musicians.push(\n        musicianService.getByName(mus)\n      );\n    });\n    // filter null musicians out\n    musicians = musicians.filter(elem => elem && elem !== null);\n    return musicians;\n  }\n\n  /**\n   * getting all albums containing in their's names \n   * the search query\n   * @param {String} query - search query\n   */\n  getAllContainingSubstring = (query) => {\n    if(query === '')\n      return [];\n    return albumRepository\n      .getAll()\n      .filter(album => album && album !== null && album.id.includes(query));\n  }\n  /**\n   * getting all albums from the repository\n   */\n  getAll = () => albumRepository.getAll();\n}\n\nexport const albumService = new AlbumService();","import { instrumentRepository } from '../repository';\nimport { musicianService } from '../service'; \n/**\n * @author Pavlo Rozbytskyi\n * @version 2.0.0 \n * instrument service layer extends basic functionality from instrument dao\n */\nclass InstrumentService{\n  /**\n   * getting all instruments containing in their's names \n   * the search query\n   * @param {String} query - search query\n   */\n  getAllContainingSubstring = (query) => {\n    if(query === '')\n      return [];\n    return instrumentRepository\n      .getAll()\n      .filter(instrument => instrument && instrument !== null && \n        instrument.id.includes(query));\n  }\n/**\n * getting instrument by name or null of it don't exist\n * @param {String} name - instrument name\n */\n  getByName = (name) => {\n    var filtered = instrumentRepository.getAll().filter(instrument => instrument.id === name);\n    return filtered.length > 0 ? filtered[0] : null;\n  }\n  /**\n   * getting all musicians played on the instrument\n   * @param {string} name - name of the instrument\n   */\n  getMusiciansOfInstrument = (name) => {\n    // var instrument = this.getByName(name);\n    // return instrument[1].musicians;\n    var instrument = this.getByName(name);\n    if(!instrument){\n      return [];\n    }\n    var musicians = instrument.musicians\n      .map(mus => musicianService.getByName(mus))\n      .filter(e => e && e !== null);\n    return musicians;\n  } \n}\n\nexport const instrumentService = new InstrumentService();","import { musicianRepository } from '../repository';\nimport { albumService } from '.';\n/**\n * @author Pavlo Rozbytskyi\n * musician service layer extends basic functionality from musician dao\n */\nclass MusicianService {\n  /**\n   * getting musicians object by name\n   * returning null if object not found or error happened \n   * @param {String} name - musicians name\n   */\n  getByName = (name) => {\n    var musician = {};\n    try{\n      // filtering all musicians by name and getting \n      // first of filtered\n      var found = musicianRepository\n        .getAll()\n        .filter(musician => musician.id === name);\n      // if not found return null\n      if(found.length > 0){\n        musician = found[0];\n      }else{\n        musician = null;\n      }\n    }catch(err){\n      console.error(err);\n      musician = null;\n    }\n    return musician;\n  }\n  /**\n   * getting all instruments played by musician\n   * @param {name} name - musicians name\n   */\n  getInstrumentsNamesOfMusician = (name) => {\n    var musician = this.getByName(name);\n\n    if(musician === null){\n      return [];\n    }\n    return musician.instruments.filter(e => e && e !== null);\n  }\n  /**\n   * getting all albums on which played musician\n   * @param {name} name - musicians name\n   */\n  getAlbumsNamesOfMusician = (name) => {\n    var musician = this.getByName(name);\n\n    if(musician === null){\n      return [];\n    }\n    return musician.albums.filter(e => e && e !== null);\n  }\n  /**\n   * getting all album objects of musician\n   * @param {string} name - musician name\n   */\n  getAlbumsOfMusician = (name) => {\n    var albObjects = [];\n    try{\n      var albums = this.getAlbumsNamesOfMusician(name);\n      albObjects = albums\n        .map(alb => albumService.getByName(alb))\n        .filter(alb => alb && alb !== null);\n    }catch(err){\n      console.log(err);\n    }\n    return albObjects;\n  }\n  /**\n   * getting all musicians containing in their's names \n   * search query\n   * @param {String} query - search query\n   */\n  getAllContainingSubstring = (query) => {\n    if(query === '')\n      return [];\n    var found = musicianRepository\n      .getAll()\n      .filter(musician => musician && musician !== null &&\n        musician.id.includes(query));\n      \n    return found;\n  }\n}\n\nexport const musicianService = new MusicianService(); \n","import { trackRepository } from '../repository';\n/**\n * @author Pavlo Rozbytskyi\n * track service layer extends basic functionality from track dao\n */\nclass TrackService {\n  /** \n   * getting track object by name or null if don't exist\n   * @param {string} name - track name\n   */\n  getByName = (name) => {\n    var filtered = trackRepository\n      .getAll()\n      .filter(track => track.id === name);\n\n    return filtered.length > 0 ? filtered[0] : null;\n  }\n  /**\n   * getting all tracks of the album\n   * @param {string} name - album name\n   */\n  getAllTracksOfAlbum = (name) => {\n    var tracks = [];\n\n    try{\n      //getting all tracks\n      trackRepository.getAll().forEach(track => {\n        // going all albums of the track\n        track.albums.forEach(album => {\n          // checking name from parameter is equal to album name in track\n          // and pushing it to collection if not present\n          if(Object.keys(album)[0] === name && !tracks.includes(track.id)){\n            tracks.push(track.id);\n          }\n        });\n      });\n    }catch(err){\n      console.error(err);\n    }\n\n    return tracks\n      .map(track => this.getByName(track))\n      .filter(track => track && track !== null);\n  }\n  /**\n   * getting all instrument - musician relations on track of certain album\n   * @param {string} trackName - track name \n   * @param {string} albumName - album name  \n   */\n  getMusicianInstrumentRelations = (trackName, albumName) => {\n    // finding track with trackName\n    var relations = trackRepository.getAll()\n      .filter(track => track.id === trackName);\n    // checking track exists and albums of track exist\n    if(!relations || !relations[0] || !relations[0].albums){\n      return [];\n    }\n    // loop over all albums of the track and find album with albumName\n    relations = relations[0].albums.filter(album => {\n        return Object.keys(album)[0] === albumName;\n    });\n    \n    if(!relations || !relations[0]){\n      return [];\n    }\n    var convertedRel = relations[0];\n    return Object.entries(convertedRel)[0][1];\n  }\n  /**\n   * getting all tracks containing in their's names \n   * the search query\n   * @param {String} query - search query\n   */\n  getAllContainingSubstring = (query) => {\n    if(query === '')\n      return [];\n    return trackRepository\n      .getAll()\n      .filter(track => track && track !== null && track.id.includes(query));\n  }\n}\n\nexport const trackService = new TrackService(); ","import React, { Component } from 'react';\nimport './triangle.css';\n\nexport default class Triangle extends Component {\n  render() {\n    const {right, left, ...props} = this.props;\n    const triangleClass = left ? \"triangle-left\" : \"triangle-right\";\n    return (\n      <div className={triangleClass} {...props} ></div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport TimelineItem from './timeline-item/timeline-item';\nimport './timeline.css';\nimport { getDistanceBetweenAlbums } from '../../scripts/helpers';\nimport { albumService } from '../../service';\nimport Triangle from './triangle/triangle';\nimport {albumWidthTimeline} from '../../scripts/constants';\n\n/**\n * component for displaying all albums\n * @author Pavlo Rozbytskyi\n * @version added getting data from parent \n */\nexport default class Timeline extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      timeline: [],\n      highlithed: '',\n    };\n    this.timelineRef = React.createRef();\n    // storing positions of albums in pixels\n    this.positions = {};\n  }\n  \n  render() {\n    const {style, className, move, moveEnd, highlighted} = this.props;\n    // move timeline if need\n    if(move){\n      this.moveTimelineItems();\n      // on the first render the ref.current ist null and \n      // you have to rerender component\n      if(this.timelineRef.current !== null){\n        moveEnd();\n      }else{\n        this.forceUpdate();\n      }\n    }\n\n    return (\n      <div className={className} style={{display: 'flex', flexDirection: 'row',  width: '100%',  height: 200}}>\n        <div className=\"triangle-container\" style={{alignSelf: 'center',}}> \n          <Triangle onClick={this._handleLeftClick} left={true}/> \n        </div>\n\n          <div ref={this.timelineRef} \n            className=\"timeline-container\" style={style}>\n            {this.getAllAlbumComponents()}\n          </div>\n        \n          <div className=\"triangle-container\" style={{alignSelf: 'center', paddingRight: 5}}>\n            <Triangle onClick={this._handleRightClick} right={true}/>\n          </div>\n        </div>\n    );\n  }\n  /**\n   * moving the timeline if need\n   */\n  moveTimelineItems = () => {\n    const {highlighted} = this.props; \n    // move timeline if ref initialized and album is not on the screen\n    if(this.timelineRef && this.timelineRef.current && \n      !this.isAlbumOnScreen(highlighted)){\n        // position of the album\n        var albumPos = this.positions[highlighted];\n        var visibleLen = this.timelineRef.current.clientWidth; \n        //move\n        if(this.isAlbumRight(highlighted)){\n          var rightPos = this.timelineRef.current.scrollLeft + visibleLen;\n          var diff     = (albumPos - rightPos) + (visibleLen / 6);\n          //moving right\n          this.timelineRef.current.scrollLeft += diff;\n        }else{\n          var leftPos = this.timelineRef.current.scrollLeft;\n          var diff    = (leftPos - albumPos) + (visibleLen / 6); \n          //moving left\n          this.timelineRef.current.scrollLeft -= diff;\n        }\n    }\n  }\n  /**\n   * checking the album is hidden right on the timeline\n   */\n  isAlbumRight = (name) => {\n    var albumPos   = this.positions[name];\n    var leftPos    = this.timelineRef.current.scrollLeft;\n    var visibleLen = this.timelineRef.current.clientWidth; \n\n    return albumPos > (visibleLen + leftPos);\n  }\n  /**\n   * checking the album is displayed\n   */\n  isAlbumOnScreen = (name) => {\n    var albumPos   = this.positions[name];\n    var leftPos    = this.timelineRef.current.scrollLeft;\n    var visibleLen = this.timelineRef.current.clientWidth; \n    \n    if(leftPos <= albumPos && (leftPos + visibleLen) >= albumPos){\n      return true;\n    }\n    return false;\n  }\n  /**\n   * getting converting all albums to timeline\n   */\n  getAllAlbumComponents = () => {\n    const {data, highlighted, switchToAlbum, showTooltip} = this.props; \n    // storing timeline in this array\n    var timeline = [];\n    // needed for react keys\n    var keyCounter = 0;\n    // current position\n    var position = 0;\n    for(var i = 0; i < data.length; i++){\n      if(i + 1 <  data.length){\n        // getting actual album data\n        var album1 = data[i];\n        var album2 = data[i + 1];\n\n        // adding position to positions array\n        this.positions[album1.id] = position;\n        // adding album to timeline\n        timeline.push(\n          <TimelineItem \n            highlighted={highlighted}\n            showTooltip={showTooltip}\n            switchToAlbum={switchToAlbum}\n            style={i === 0 ? {paddingLeft: 50,} : {}}\n            itemId={i}\n            key={keyCounter++}\n            name={album1.id} \n            icon={album1.icon} \n            date={album1.released}/>\n        );\n        // adding width of the album to current position to get position of the \n        // line start and than add distance to next album\n        var distance = getDistanceBetweenAlbums(album1, album2);\n        position += (distance + albumWidthTimeline); // so we get position of the next album\n        this.positions[album2.id] = position; \n        //line between two components\n        timeline.push(\n          <div key={keyCounter++} className=\"line-container\">\n            <svg width={distance} height='15px'>\n              <line stroke=\"#3B6295\" strokeWidth=\"20\" \n              x1=\"0\" y1=\"0\" x2={distance} y2=\"0\"/>  \n            </svg>\n          </div>\n        );\n      }else{\n        var album3 = data[i];\n        //add position of the last element to the positions object\n        this.positions[album3.id] = position;\n        // last element\n        timeline.push(\n          <TimelineItem \n            highlighted={highlighted}\n            showTooltip={showTooltip}\n            switchToAlbum={switchToAlbum}\n            style={{paddingRight: 50,}}\n            itemId={i}\n            key={keyCounter++}\n            name={album3.id} \n            icon={album3.icon} \n            date={album3.released}/>\n        );\n      }\n    }\n    return timeline;\n  }\n  /**\n   * moving timeline to left after pressing on left triangle\n   */\n  _handleLeftClick = (event) => {\n      this.timelineRef.current.scrollLeft -= 600;\n  }\n  /**\n   * moving timeline to right after pressing on right triangle\n   */\n  _handleRightClick = (event) => {\n    this.timelineRef.current.scrollLeft += 600;\n  }\n}\n","import './tooltip.css';\nimport React, { Component } from 'react';\n/**\n * @author Pavlo Rozbytskyi\n * @version 1.0.0\n * tooltip for musicians\n */\nexport default class MusicianTooltip extends Component {\n  render() {\n    const {musician} = this.props;\n    // getting deathdate of the musician\n    var deathdate = musician.deathdate !== \"\" ? (<p>deathdate: {musician.deathdate}</p>) : \"\";\n    // block with image\n    const imgBlock = musician.icon ? \n      (<div className=\"container text-center w-100\">\n        <img className=\"mx-auto\" src={musician.icon} alt={musician.label}/>\n      </div>) : null; // add react avatar\n    \n    return (\n      <div className=\"container tooltip-container pt-5\">\n        {imgBlock}\n        <div className=\"container text-center text-wrap pb-3\">\n          <h4>{musician.id}</h4>\n          <p>involved in {musician.albums.length} albums</p>\n          <div className=\"text-wrap instruments-div\">\n            <p>played on {musician.instruments.toString()}</p>\n          </div>\n          <p>birthdate: {musician.birthdate}</p>\n          {deathdate}\n          <a target=\"_blank\" href={musician.url}>link to the biography</a>\n        </div>\n      </div>\n    );\n  }\n}\n","import './tooltip.css';\nimport React, { Component } from 'react';\n/**\n * @author Pavlo Rozbytskyi\n * @version 1.0.0\n * tooltip for albums\n */\nexport default class AlbumTooltip extends Component {\n  render() {\n    const {album} = this.props;\n     // getting block with image\n    const imgBlock = album.icon ? \n    (<div class=\"container image-container\">\n      <img src={album.icon} alt={album.label}/>\n    </div>) : null; // add react avatar\n\n    return (\n       <div class=\"container tooltip-container\">\n        {imgBlock}\n\n        <div class=\"container text-center\">\n          <h4>{album.id}</h4>\n          <p>{album.musicians.length} musicians worked on</p>\n          <p>release date: {album.released}</p>\n          <p>label: {album.label}</p>\n          <p>producers: {album.producers}</p>\n          <a target=\"_blank\" href={album.url}>link to a album info</a>\n        </div>\n      </div>\n    );\n  }\n}\n","import './tooltip.css';\nimport React, { Component } from 'react';\n/**\n * @author Pavlo Rozbytskyi\n * @version 1.0.0\n * tooltip for instruments\n */\nexport default class InstrumentTooltip extends Component {\n  render() {\n    const {instrument} = this.props;\n     // getting block with image\n    const imgBlock = instrument.url ? \n    (<div className=\"container image-container pt-5 w-100\">\n      <img className=\"mx-auto\" src={instrument.url} alt={instrument.label}/>\n    </div>) : null; // add react avatar\n\n    return (\n       <div className=\"container tooltip-container\">\n        {imgBlock}\n\n        <div className=\"container text-center\">\n          <h4>{instrument.id}</h4>\n          <p>{instrument.musicians.length} musicians played on this instrumet</p>\n        </div>\n      </div>\n    );\n  }\n}\n","import {getInitials} from '../../../scripts/helpers';\n/**\n * this file contains all styles of cytoscape instance\n * @author Pavlo Rozbytskyi\n */\n\n  // sizes of secondary nodes e.g. musician node on \n // albums perspective\n const defaultWidth     = 100;\n const defaultHeight    = 100;\n const defaultBorder    = '5px';\n const trackWidth       = 50;\n const trackHeight      = 50;\n const edgeWidth        = 5;\n // sizes of main nodes e.g. musicians node \n // on musicians perspective\n const mainWidth     = 130;\n const mainHeight    = 130;\n const mainBorder    = '7px';\n const mainFontSize  = '20';\n // colors and shapes\n const musicianColor   = '#469B30';\n const whiteColor      = '#FFFFFF';\n const musicianShape   = 'square';\n const albumShape      = 'ellipse';\n const albumColor      = '#2E6299';\n const instrumentShape = 'diamond';\n const instrumentColor = '#f18867';\n const trackShape      = 'round-triangle';\n const trackColor      = '#E1AC3C';\n /**\n  * style of the album edge\n  */\n export const albumEdge = {\n  selector: 'edge[type=\"album\"]',\n  style: {\n    'line-color': albumColor,\n    'width': edgeWidth,\n  }\n };\n /**\n  * musicians edge style\n  */\n export const musicianEdge = {\n  selector: 'edge[type=\"musician\"]',\n  style: {\n    'line-color': musicianColor,\n    'width': edgeWidth,\n  }\n };\n /**\n  * instruments edge style\n  */\n export const instrumentEdge = {\n  selector: 'edge[type=\"instrument\"]',\n  style: {\n    'line-color': instrumentColor,\n    'width': edgeWidth,\n  }\n }\n /**\n  * edge to track style\n  */\n export const trackEdge = {\n  selector: 'edge[type=\"track\"]',\n  style: {\n    'line-color': trackColor,\n  }\n }\n /**\n  * styles of the instrument\n  */\n export const instrumentNode = {\n  selector: 'node[type=\"track\"]',\n  style: {\n    width: trackWidth,\n    height: trackHeight,\n    shape: trackShape,\n    content: 'data(label)',\n    'background-color': trackColor,\n    'background-image': 'none',\n  }\n }\n/**\n * general style of all nodes\n */\n export const nodeStyle = {\n  selector: 'node[icon]',\n  style: {\n    'background-fit': 'contain',\n    'background-image': function(elem){\n      // return image if exists\n      var icon = elem.data().icon;\n      if(icon && icon !== \"\" && icon !== 'none'){\n        return icon;\n      }\n      // create svg if not exist\n      const initial = getInitials(elem.data().label);\n      const svgImage = `<svg xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"46\" height=\"46\" \n        style=\"background-color:rgb(52, 73, 94);-moz-border-radius: 0px;\">\n        <text \n          style=\"font-size: 20px; font-weight: 400\"\n          font-family=\"HelveticaNeue-Light,Helvetica Neue Light,Helvetica Neue,\n          Helvetica,Arial,Lucida Grande,sans-serif\"  text-anchor=\"middle\" \n          y=\"50%\" x=\"50%\" dy=\"0.35em\" fill=\"white\">${initial}</text>\n        Sorry, your browser does not support inline SVG.\n      </svg>`\n      // creating url\n      const svgUrl = encodeURI(\"data:image/svg+xml;utf8,\" + svgImage);\n      //returning svg url\n      return svgUrl;\n    }\n  }\n }\n /**\n  * default style of musician\n  */\n const musicianStyle = {\n  selector: 'node[type=\"musician\"]',\n  style: {\n    width: defaultWidth,\n    height: defaultHeight,\n    shape: musicianShape,\n    content: 'data(label)',\n    'border-color': musicianColor,\n    'background-color': whiteColor,\n    'border-width': defaultBorder,\n    'text-margin-y': -10\n  }\n };\n\n /**\n   * getting style of musician nodes and edges for each perspective\n   * @param {string} type - type of perspective should be displayed\n   * possible types are: musician, track, album\n   */\n  export const getMusicianStyle = (type) => {\n    // deep copy\n    let musician = JSON.parse(JSON.stringify(musicianStyle));\n\n    switch(type){\n      //musician style on albums perspective\n      case \"album\":\n        musician.style['text-margin-y'] = -5;\n        break;\n      //musician style on musicians perspective\n      case \"musician\": \n        musician.style.width = mainWidth;\n        musician.style.height = mainHeight;\n        musician.style['border-width'] = mainBorder;\n        musician.style['font-weight'] = 'bold';\n        musician.style['font-size'] = mainFontSize;\n        break;\n      case \"special\": \n        musician.style['text-margin-y'] = '-5';\n        break;\n      default: \n        break;\n    }\n    return musician;\n  }\n  /**\n   * style of the album\n   */\n  const albumStyle = {\n    selector: 'node[type=\"album\"]',\n    style: {\n      width: defaultWidth,\n      height: defaultHeight,\n      shape: albumShape,\n      content: 'data(label)',\n      'border-color': albumColor,\n      'background-color': whiteColor,\n      'border-width': defaultBorder,\n      'text-margin-y': -10\n    }\n  };\n  /**\n   * getting style of album nodes and edges for each perspective\n   * @param {string} type - type of current perspective\n   * possible types are: musician, track, album\n   */\n  export const getAlbumStyle = (type) => {\n    let album = JSON.parse(JSON.stringify(albumStyle));\n\n    switch(type){\n      case \"musician\":\n        album.style['text-margin-y'] = '-5';\n        break;\n      case \"album\": \n        album.style.width = mainWidth;\n        album.style.height = mainHeight;\n        album.style['border-width'] = mainBorder;\n        album.style['font-weight'] = 'bold';\n        album.style['font-size'] = mainFontSize;\n        break;\n      case \"special\": \n        album.style['text-margin-y'] = '-5';\n        break;\n      default: \n        break;\n    }\n    return album;\n  }\n\n  /**\n   * default instrument's style\n   */\n  const instrumetStyle = {\n    selector: 'node[type=\"instrument\"]',\n    style: {\n      width: defaultWidth,\n      height: defaultHeight,\n      shape: instrumentShape,\n      content: 'data(label)',\n      'border-color': instrumentColor,\n      'border-width': defaultBorder,\n      'text-margin-y': -10\n    }\n  };\n  /**\n   * getting style of instrument nodes and edges for each perspective\n   * @param {string} type - type of perspective should be displayed\n   * possible types are: musician, track, album\n   */\n  export const getInstrumentStyle = (type) => {\n    // deep copy of the instrument\n    let instrument = JSON.parse(JSON.stringify(instrumetStyle));\n\n    switch(type){\n      case \"musician\": \n      instrument.style['text-margin-y'] = '-5';\n        break;\n      case \"instrument\":\n        instrument.style.width = mainWidth;\n        instrument.style.height = mainHeight;\n        instrument.style['border-width'] = mainBorder;\n        instrument.style['text-margin-y'] = '-10';\n        instrument.style['font-weight'] = 'bold';\n        instrument.style['font-size'] = mainFontSize;\n        break;\n      default: \n        break;\n    }\n    return instrumetStyle;\n  }","import './graph.css';\nimport React from 'react';\nimport CytoscapeComponent from 'react-cytoscapejs';\nimport Cytoscape from 'cytoscape';\nimport coseBilkent from 'cytoscape-cose-bilkent';\nimport popper from 'cytoscape-popper';\nimport tippy, {sticky} from 'tippy.js';\nimport ReactTooltip from 'react-tooltip'\nimport 'tippy.js/dist/tippy.css';\nimport { musicianService, albumService, instrumentService } from '../../service';\nimport { renderToString } from 'react-dom/server'\nimport {MusicianTooltip, AlbumTooltip, InstrumentTooltip} from './tooltip';\nimport {albumEdge, musicianEdge, \n  instrumentEdge, trackEdge, nodeStyle, instrumentNode,\n  getMusicianStyle, getAlbumStyle, getInstrumentStyle} from './graph-styles/GraphStyles';\n\nCytoscape.use( popper );\nCytoscape.use(coseBilkent);\n/**\n * @author Pavlo Rozbytskyi\n * component renders all musicians of each album\n */\nexport default class Graph extends React.Component {\n  constructor(props){\n    super(props);\n    // needed to fix event handlers of collections\n    this.callCount = 0;\n    this.selectedSize = 0;\n  }\n\n  render(){\n    // dont render component if album not set \n    if(this.props.data.length === 0)\n      return null;\n    const {type, className} = this.props;\n    // getting styles of musician, album, instrument\n    const musiciansStyle = getMusicianStyle(type);\n    const albumStyle = getAlbumStyle(type);\n    const instrumentStyle = getInstrumentStyle(type);\n\n    return (<CytoscapeComponent \n      className={className}\n      stylesheet={[\n        musiciansStyle,\n        albumStyle,\n        instrumentStyle,\n        trackEdge,\n        instrumentEdge,\n        musicianEdge,\n        albumEdge,\n        nodeStyle,\n        instrumentNode\n      ]}\n      cy={(cy) => { \n        this.cy = cy;\n        this.cy.layout({name:'cose-bilkent', spacingFactor: 2}).run();\n        this.cy.unbind(\"tap\");\n        this.cy.bind('tap', 'node', evt => { \n          this.handleNodeClick(evt.target.data())\n        });\n\n        this.cy.unbind(\"cxttap\");\n        this.cy.bind('cxttap', 'node', evt => { \n          let node = evt.target;\n          let dummyDomEle = document.createElement('div');\n          let ref = node.popperRef();\n          let tip = new tippy(dummyDomEle, { // tippy options:\n            // mandatory:\n            appendTo: document.body,\n            flip: [\"top\", \"left\"],\n            interactive: true,\n            sticky: true,\n            animation: 'scale',\n            arrow: false,\n            plugins: [sticky],\n            trigger: 'manual', // call show() and hide() yourself\n            lazy: false, // needed for onCreate()\n            // needed for `ref` positioning\n            onCreate: instance => { instance.popperInstance.reference = ref; }, \n            // your custom options follow:\n            content: () => {\n              let content = document.createElement('div');\n              content.innerHTML = this.getTooltipByOfNode(node);\n              return content;\n            },\n            popperOptions: {\n              positionFixed: true\n            }\n          });\n\n          if(node.data().type !== 'track')\n            tip.show();\n        });\n\n        this.cy.unbind(\"boxselect\");\n        this.cy.bind('boxselect', 'node', evt => { \n          if(this.callCount === 0){\n            var selected = this.cy.$(':selected');\n            this.props.handleCollection(selected);\n            // call function to trigger\n            this.selectedSize = selected.length;\n            this.callCount++;\n          }else{\n            this.callCount++;\n          }\n\n          if(this.callCount >= this.selectedSize){\n            this.callCount = 0;\n            this.selectedSize = 0;\n            this.cy.$(':selected').unselect();\n          }\n        });\n      }}\n      minZoom={0.3}\n      maxZoom={5}\n      elements={this.props.data} \n      layout={{name: 'cose-bilkent', spacingFactor: 2}}\n      />)\n  }\n\n  /**\n   * special perspectives show compound elements e.g. \n   * on which albums played musicians together.  \n   */\n  handleSpecialPerspective = (type, label) => {\n    switch(type){\n      case \"musician\": \n        this.props.showMusicianDisplay(label);\n        break;\n      case \"instrument\": \n        // this.props.showInstrumentDisplay(label);\n        break;\n      case \"album\": \n        this.props.switchToAlbum(label);\n        break;\n      default: \n        break;\n    }\n  }\n  /**\n   * Click handler for all nodes.\n   * \n   * graph component shows different perspectives and each perspective\n   * shows his own nodes on the screen. Nodes of different types have \n   * different event hanlers.\n   *\n   * e.g.: on the musician perspective are placed albums and instruments of \n   * the musician. Press on instrument should navigate user to instruments \n   * perspective, press on album node should navigate user to \n   * album's perspective. \n   * \n   * @param {Object} node - node\n   */\n  handleNodeClick = (node) => {\n    // getting type of current perspective (musician, album, insturment)\n    switch(this.props.type) {\n      // handling all clicks on track perspective\n      case \"special\": \n        // handle clicks on special perspective\n        this.handleSpecialPerspective(node.type, node.label);\n        break;\n      case \"track\":\n        // showing track display \n        break;\n      case \"instrument\":\n        // showing track display \n        this.handleInstrumentsPerspectiveClicks(node.type, node.label);\n        break;\n      // handling all clicks on album perspective\n      case \"album\":\n        this.handleAlbumPerspectiveClicks(node.type, node.label);\n        break;\n      // handling all clicks on album perspective\n      case \"musician\":\n        this.handleMusiciansPerspectiveClicks(node.type, node.label);\n        break;\n      default:\n        break;\n    }\n  }\n  /**\n   * handle pressing on nodes in instrument perspective\n   * @param {string} type - type current perspective\n   * @param {string} label - name of the node\n   */\n  handleInstrumentsPerspectiveClicks = (type, label) => {\n    switch(type){\n      // press on musician in the instrument perspective\n      // leads user to musician perspective\n      case \"musician\": \n        this.props.showMusicianDisplay(label);\n        break;\n      // press on instrument in the instrument perspective\n      // leads user back to musicians perspective\n      case \"instrument\": \n        this.props.hideInstrumentDisplay();\n        break;\n      default: \n        break;\n    }\n  }\n  /**\n   * handle pressing on nodes in musician perspective\n   * @param {string} type - type of current perspective\n   * @param {string} label - name of pressed node\n   */\n  handleMusiciansPerspectiveClicks = (type, label) => {\n    switch(type){\n      // press on album in the musician perspective\n      // leads user to albums perspective\n      case \"album\":\n        this.props.switchToAlbum(label);\n        break;\n      // press on musician in the musician perspective\n      // leads user back to albums perspective\n      case \"musician\": \n        this.props.hideMusicianDisplay();\n        break;\n      // press on instrument in the musician perspective\n      // leads user to instrument's perspective\n      case \"instrument\": \n        this.props.showInstrumentDisplay(label);\n        break;\n      default: \n        break;\n    }\n  }\n  /**\n   * handle pressing on nodes in album perspective\n   * @param {string} type - type of current perspective\n   * @param {string} label - name of the pressed node\n   */\n  handleAlbumPerspectiveClicks = (type, label) => {\n    switch(type){\n      case \"album\":\n        break;\n      // press on musician in the album perspective\n      // leads user to musician's perspective\n      case \"musician\": \n        this.props.showMusicianDisplay(label);\n        break;\n      // press on track in the album perspective\n      // leads user to track's perspective\n      case \"track\": \n        this.props.showTrackDisplay(label);\n        break;\n      default: \n        break;\n    }\n  }\n  \n  /**\n   * getting tooltip html of node\n   */\n  getTooltipByOfNode = (node) => {\n    var data = node.data();\n\n    switch(data.type){\n      case \"musician\":\n        //getting musician object\n        var musician = musicianService.getByName(data.label);\n        // displaing tooltip for the musician\n        return renderToString(<MusicianTooltip musician={musician}/>)\n      case \"album\":\n        //getting album object\n        var album = albumService.getByName(data.label);\n        // displaying album tooltip\n        return renderToString(<AlbumTooltip album={album}/>)\n      case \"instrument\":\n        //getting instrument object\n        var instrument = instrumentService.getByName(data.label);\n        //displaying instrument tooltip\n        return renderToString(<InstrumentTooltip instrument={instrument}/>)\n      default: \n        break;\n    }\n  }\n}\n","import './track-display.css';\nimport React, { Component } from 'react';\nimport 'react-vertical-timeline-component/style.min.css';\nimport Avatar from 'react-avatar';\nimport { musicianService, instrumentService } from '../../service';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\nimport {MusicianTooltip, InstrumentTooltip} from './tooltip';\n\nimport {\n  Tooltip,\n} from 'react-tippy';\n\n/**\n * @author Pavlo Rozbytskyi\n * component for representation of all musicians played on current traсk\n * and which instrument played this musician on this track\n */\nexport default class TrackDisplay extends Component {\n  constructor (props){\n    super(props);\n\n    this.musicians = [];\n    this.instruments = [];\n  }\n  render() {\n    const { name, album, className, data, hideTrackDisplay } = this.props;\n\n    return(\n      <div className={className}>\n        <div className=\"w-100 row justify-content-end pt-3 br-5\">\n          <FontAwesomeIcon icon={faTimes} onClick={hideTrackDisplay}/>\n        </div>\n      \n        <div className=\"w-100 row px-5 overflow-auto\">\n          <div className=\"w-100 row\">\n            <div className=\"col\">\n              <h2>{name}</h2>\n              <h5 className=\"text-secondary\">On \"{album.id}\" album</h5>\n            </div>\n            <div className=\"row w-100\">\n              <p className=\"text-secondary pl-5\">\n                {this.musicians.length} musicians\n              </p>\n              <p className=\"text-secondary ml-auto\">\n                {this.instruments.length} instruments\n              </p>\n            </div>\n          </div>\n\n          <div className=\"col pl-5\">\n            {this.getContent()}\n          </div>\n        </div>\n      </div>\n    )\n  }\n  \n  componentWillMount() {\n    const { data } = this.props;\n    const musNotFilter = data.map(relation => Object.keys(relation)[0]);\n    const instNotFilter = data.map(relation => Object.values(relation)[0]);\n    // storing musician and instruments\n    this.musicians = [...new Set(musNotFilter)];\n    this.instruments = [...new Set(instNotFilter)];\n  }\n  /**\n   * getting content of tracks perspective\n   */\n  getContent = () => {\n    const { data, switchToMusician } = this.props;\n    const content = data.map((relation, index) => {\n      // getting musician's name \n      let musicianName   = Object.keys(relation)[0];\n      // getting instrument's name\n      let instrumentName = relation[musicianName];\n      // getting musician and instrument by name\n      let musician   = musicianService.getByName(musicianName);\n      let instrument = instrumentService.getByName(instrumentName); \n      // creating avatar of musician\n      let musicianAvatar = (\n        <Tooltip position=\"right\" hideDelay={0} interactive={true} animation=\"none\"\n          duration={50} hideOnClick={false}\n          trigger=\"mouseenter\" html={<MusicianTooltip musician={musician}/>}>\n          <Avatar \n            onClick={() => switchToMusician(musicianName)}\n            className=\"box-shadow my-auto\" \n            round={true} src={musician.icon} size={100} name={musician.id}/>\n        </Tooltip>);\n      // creating avatar of the instrument    \n      let instrumentAvatar = (\n        <Tooltip position=\"right\" hideDelay={0} interactive={true} animation=\"none\"\n          sticky={false} duration={50} hideOnClick={false}  \n          trigger=\"mouseenter\" html={<InstrumentTooltip instrument={instrument}/>}>\n          <Avatar className=\"box-avatar my-auto\" \n            round={true} src={instrument.url} size={70} name={instrument.id}/>\n        </Tooltip>);\n\n      return (\n        <div className=\"row my-3\" key={index}>\n          <div className=\"row w-75\">\n            {musicianAvatar}\n            <h6 className=\"my-auto ml-4\">{musician.id}</h6>\n          </div>\n          <div className=\"row w-25 justify-content-end\">\n            {instrumentAvatar}\n          </div>\n        </div>\n      )\n    });\n    return content; \n  }\n\n  /**\n   * getting tooltip of musician or instrument\n   * @param {Object} node - musician or instrument object\n   * @param {String} type - type of node: musician or instrument\n   */\n  getTooltip = (node, type) => {\n    switch(type){\n      case \"musician\":\n        // displaing tooltip for the musician\n        return <MusicianTooltip musician={node}/>;\n      case \"instrument\":\n        return <InstrumentTooltip instrument={node}/>;\n      default: \n        return null;\n    }\n  }\n}\n","import {instrumentService, musicianService, albumService} from '../service';\nimport {uuid} from '../scripts/helpers';\n/**\n * @author Pavlo Rozbytskyi\n * @version 1.0.0\n * \n * Presentation layer: converting data from services to objects can be directly\n * displayed by cytoscape instance.\n */\n\n/**\n * convert album to cytoscape element\n * @param {Object} album album object to convert\n */\nexport const getCytoAlbum = (album) =>{\n  return { \n    data: {\n      type: \"album\", \n      label: album.id, \n      icon: album.icon,\n      id: uuid()\n    }\n  }\n}\n\n/**\n * convert musician to cytoscape element\n * @param {Object} musician musician object to convert\n */\nexport const getCytoMusician = (musician) =>{\n  return { \n    data: {\n      type: \"musician\", \n      label: musician.id, \n      icon: musician.icon,\n      id: uuid()\n    } \n  };\n}\n/**\n * convert instrument to cytoscape element\n * @param {Object} instrument instrument object to convert\n */\nexport const getCytoInstrument = (instrument) =>{\n  return {\n    data: {\n      type: \"instrument\", \n      label: instrument.id, \n      icon: instrument.url,\n      id: uuid()\n    } \n  };\n}\n/**\n * convert track to cytoscape element\n * @param {Object} track track object to convert\n */\nexport const getCytoTrack = (track) =>{\n  return { \n    data: {\n      type: \"track\", \n      label: track.id, \n      id: uuid()\n    }\n  };\n}\n/**\n * ctreating edge between two nodes\n * @param {Object} source source node\n * @param {Object} destination destination node\n */\nexport const getEdge = (source, destination) => {\n  return { \n    data: { \n      source: source.data.id, \n      type: destination.data.type, \n      target: destination.data.id\n    } \n  }\n}\n/**\n * preparing data for the album perspective\n * \n * connecting musicians and tracks with album\n * @param {Array} tracks tracks to display on graph\n * @param {Array} musicians musicians to display on graph\n * @param {Object} album album to display on graph\n */\nexport const getAlbumPerspective = (tracks, musicians, album) => {\n  try{\n    // converting albums, tracks and musicians to format: {data: {id: \\d, label: .+, icon}}\n    var convAlbum = getCytoAlbum(album);\n    var convTracks = tracks.flatMap(track => {\n        var convTrack = getCytoTrack(track);\n        var edge = getEdge(convAlbum, convTrack);\n        // returning track node and edge from this node to album node\n        return [convTrack, edge];\n    });\n    var convMus = musicians.flatMap(musician => {\n        var convMusician = getCytoMusician(musician);\n        var edge = getEdge(convAlbum, convMusician);\n        // returning musician node and edge from this node to album node\n        return [convMusician, edge];\n    });\n    // returning array containing all elements of album\n    return [convAlbum, ...convTracks, ...convMus]; \n  }catch(err){\n    console.error('error occured in getting album perspective')\n    return getCytoAlbum(album);\n  }\n} \n\n/**\n * converting instruments and musicians to data format readable by \n * cytoscape\n * @param {string} instrumentName name of instrument to be displayed\n */\nexport const getInstrumentPerspective = (name) => {\n  try{\n    var instrument = instrumentService.getByName(name);\n    var musicians  = instrumentService.getMusiciansOfInstrument(name);\n    // converting albums, tracks and musicians to format: {data: {id: \\d, label: .+, icon}}\n    var convInstr = getCytoInstrument(instrument);\n    var convMusic = musicians.flatMap(mus => {\n      var node = getCytoMusician(mus);\n      var edge = getEdge(convInstr, node);\n      // returning track node and edge from this node to album node\n      return [node, edge];\n    });\n    // returning array containing all elements of album\n    return [convInstr, ...convMusic]; \n  }catch(err){\n    console.error('error occured by creation instruments perspective');\n    return getCytoInstrument(instrument);\n  }\n} \n/**\n * preparing data for the perspective where is displayed \n * on which albums some musicians have played together. \n * \n * @param {Array} nodes selected nodes\n */\nexport const getCompoundForAlbums = (nodes) => {\n  // getting collection with selected albums\n  let albums = nodes\n    .filter(album => album.data().type === \"album\")\n    .map(album => { return {data: album.data()}} );\n  \n  try{\n    // following lines find common albums of musicians\n    let commonMusicians = albums\n      .reduce((accumulator, album, index, array) => {\n        // getting all albums names of the given musician\n        let musicians = albumService.getByName(album.data.label).musicians;\n        // return all albums on the first iteration \n        if(index === 0){\n          return musicians;\n        }\n        // getting compound elements of previous musician and current\n        return accumulator.filter(elem => musicians.includes(elem));\n      }, [])\n      // converting albums to cytoscape albums  \n      .map(musicianName => {\n        let musician = musicianService.getByName(musicianName);\n        return getCytoMusician(musician);\n      });\n    // creating edges from all musicians to all albums\n    let edges = commonMusicians.flatMap(musician => {\n      let albumMusicianEdges = albums.map(album => getEdge(album, musician));\n      return [...albumMusicianEdges];\n    });\n\n    return [...albums, ...commonMusicians, ...edges];\n  }catch(err){\n    console.error('error occured in creating common musicians for albums');\n  }\n  return albums;\n}\n/**\n * preparing data for the perspective where is displayed \n * on which albums some musicians have played together. \n * \n * @param {Array} nodes selected nodes \n */\nexport const getCompoundForMusicians = (nodes) => {\n  // getting collection with selected musicians\n  let musicians = nodes\n  .filter(mus => mus.data().type === \"musician\")\n  .map(mus => { return {data: mus.data()}} );\n  try{\n    // following lines find common albums of musicians\n    let commonAlbums = musicians\n      .reduce((accumulator, musician, index, array) => {\n        // getting all albums names of the given musician\n        let albums = musicianService.getAlbumsNamesOfMusician(musician.data.label);\n        // return all albums on the first iteration \n        if(index === 0){\n          return albums;\n        }\n        // getting compound elements of previous musician and current\n        let elems = accumulator.filter(elem => albums.includes(elem));\n        return elems;\n      }, [])\n      // converting albums to cytoscape albums  \n      .map(albumName => {\n        let album = albumService.getByName(albumName);\n        return getCytoAlbum(album);\n      });\n    // creating edges from all musicians to all albums\n    let edges = commonAlbums.flatMap(album => {\n      let albumMusicianEdges = musicians.map(musician => getEdge(musician, album));\n      return [...albumMusicianEdges];\n    });\n\n    return [...musicians, ...commonAlbums, ...edges];\n\n  }catch(err){\n    console.error('error occured in creating compound albums for musicians');\n    return musicians;\n  }\n} \n\n\n/**\n * convertive data for musician perspective to data format readable by \n * cytoscape\n * @param {string} tracks tracks to display on graph\n */\nexport const getMusicianPerspective = (musicianName) => {\n  try{\n    var musician    = musicianService.getByName(musicianName);\n    // instruments and albums names\n    var instruments = musicianService.getInstrumentsNamesOfMusician(musicianName);\n    var albums      = musicianService.getAlbumsNamesOfMusician(musicianName);\n    // instruments and albums objects\n    var instObjects = instruments.map(instr => instrumentService.getByName(instr));\n    var albObjects  = albums.map(alb => albumService.getByName(alb));\n    // converting albums, tracks and musicians to format: {data: {id: \\d, label: .+, icon}}\n    var convMus   = getCytoMusician(musician);\n    var convInstr = instObjects.flatMap(instr => {\n        var node = getCytoInstrument(instr);\n        var edge = getEdge(convMus, node);\n        // returning instrument node and edge from this node to musician node\n        return [node, edge];\n    });\n    var convAlb = albObjects.flatMap(alb => {\n        var node = getCytoAlbum(alb);\n        var edge = getEdge(convMus, node);\n        // returning musician node and edge from this node to album node\n        return [node, edge];\n    });\n    // // returning array containing all elements of album\n    return [convMus, ...convInstr, ...convAlb]; \n  }catch(err){\n    console.error(\"error occured in creation musicians perspective\");\n    return getCytoMusician(musician);\n  }\n} \n\n/**\n * converting musicians - instrument relations to data format readable by \n * cytoscape\n * @param {Object} relations musician - instrument relation\n */\nexport const getTrackPerspective = (relations) => {\n  try{\n    // converting albums, tracks and musicians to format: {data: {id: \\d, label: .+, icon}}\n    var converted = relations.flatMap(relation => {\n      let musician   = relation[0];\n      let instrument = relation[1];\n      // converting data in cytoscape objects\n      let musConvert  = getCytoMusician(musician);\n      let instConvert = getCytoInstrument(instrument);\n      let edge        = getEdge(instConvert, musConvert);\n      // returning track node and edge from this node to album node\n      return [musConvert, instConvert, edge];\n    });\n    return converted;\n  }catch(err){\n    console.error('error occured in creation track perspective');\n    return [];\n  }\n} \n/**\n * making array of relations type {string} musician - {string} instrument \n * to {object} musician - {object} instrument\n * @param {Array} relations - musician - instrument relations\n */\nexport const getObjectsToMusicianInstrumentRelation = (relations) => {\n  try{\n    var converted = relations.map(rel => {\n      var newRel = {};\n      newRel[0] = musicianService.getByName(Object.entries(rel)[0][0]);\n      newRel[1] = instrumentService.getByName(Object.entries(rel)[0][1]);\n      return newRel;\n    });\n    return converted;\n  }catch(err){\n    console.error(relations);\n    return [];\n  }\n}","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport queryString from 'query-string';\nimport './album-route.css';\nimport { SearchBar, NavigationBar, Timeline, AlbumGraph, TrackDisplay } from '../../components';\nimport { albumService, musicianService, trackService, instrumentService } from '../../service';\n\nimport { \n    getAlbumPerspective, \n    getMusicianPerspective,\n    getInstrumentPerspective,\n    getCompoundForMusicians,\n    getCompoundForAlbums,\n    getTrackPerspective\n  } from '../../presentation/converter';\n\n/**\n * @author Pavlo Rozbytskyi\n * in this component is main user interaction where \n * are showed different perspectives for the user.\n */\nclass AlbumRoute extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      collapseNavbar: false,\n      album: '',\n      trackName: '',\n      musicianName: '',\n      instrumentName: '',\n    // cytoscape graph instance stays the same \n    // for all perspectives (musician, album, track, instrument) and we have \n    // to let the graph instance know which perspective to display\n    // e.g to adjust styles and event handlers etc. \n    // That's why we need to keep the type of perspective in state of  \n    // current component in perspective variable and past it into \n    // the graph instance.\n      perspective: '', // current perspective\n      moveTimeline: true, \n    };\n    this.specialCaseFunction = getCompoundForMusicians;\n    // store here previous perspectives to be able to navigate back\n    this.navigationStack     = []; \n  }\n\n  componentDidMount() {\n    // just be sure that just albums component will be showed\n    this.props.showAlbums();\n    // getting values from the query string\n    const values = queryString.parse(this.props.location.search);\n    // there are two values of the query string: n stands for \n    // name of the album and m stands for musicians name\n\n    // if name of the album defined, show this album on the display\n    if(values.n){\n      // if values from query string exist, get album name\n      this.props.showAlbums(values.n);\n      this.setCurrentAlbum(values.n);\n      // show musician if exists in the url\n      if(values.m){\n        this.showMusicianDisplay(values.m);\n      }\n    }else{\n      // if values from query string does not exist, get first album\n      // and set this album as current album\n      var albumName = albumService.getFirstAlbum().id;\n      this.setCurrentAlbum(albumName);\n    }\n  }\n\n  render() {\n    // don't show the component if not active\n    if(!this.props.active)\n      return null;\n    // getting data from state\n    const {\n        album, perspective,\n        musicianName, instrumentName,\n        trackName, moveTimeline\n      } = this.state;\n    // gettingflex-column data for the timeline\n    const timelineData = albumService\n      .getAll()\n      .sort((a, b) => new Date(a.released) - new Date(b.released));\n    // style to toggle navigation bar \n    const collapseClass = this.state.collapseNavbar ? \"w-25 col\" : null;\n\n    // data1 and data2 will be past into navigation bar\n    var data1 = [];\n    var data2 = [];\n    //type1 and type2 will be past into navigation bar\n    var type1 = \"\";\n    var type2 = \"\";\n    \n    // this elements array will be rendered on the graph instance\n    var elements = [];\n    // try to show some elements if the album exists\n    if(album){\n      // preparing data for corresponding perspectives\n      switch(perspective){\n        // data for musician's perspective\n        case 'musician': \n          elements = getMusicianPerspective(musicianName);\n          data1 = musicianService.getAlbumsNamesOfMusician(musicianName);\n          data2 = musicianService.getInstrumentsNamesOfMusician(musicianName);\n          type1 = \"album\";\n          type2 = \"instrument\";\n          break;\n        // data for instrument's perspective\n        case 'instrument':\n          elements = getInstrumentPerspective(instrumentName);\n          data1 = instrumentService\n            .getMusiciansOfInstrument(instrumentName)\n            .map(elem => elem.id);\n          data2 = [];\n          type1 = \"musician\";\n          type2 = \"\";\n          break;\n        // data for track's perspective\n        case 'track':\n          elements = trackService.getMusicianInstrumentRelations(trackName, album.id);\n          break;\n        // data for special case perspective where are dependencies \n        // e.g. between two musicians\n        case 'special': \n          elements = this.specialCaseFunction(this.data);\n          break;\n        // data for albums perspective is showed by defaul \n        default: \n          var musicians = albumService.getMusiciansOfAlbum(album);\n          var tracks = trackService.getAllTracksOfAlbum(album.id);\n\n          elements = getAlbumPerspective(tracks, musicians, album);\n          data1 = musicians\n            .map(elem => elem ? elem.id : null)\n            .filter(e => e && e !==null);\n          data2 = tracks\n            .map(elem => elem ? elem.id : null)\n            .filter(e => e && e !==null);\n            \n          type1 = \"musician\";\n          type2 = \"track\";\n\n          break;\n      }\n    }\n \n    return (\n      // toot div\n      <div className=\"col w-100 h-100\">\n        {/* searchbar container */}\n        <div className=\"row\">\n        <SearchBar\n          back={(perspective === 'special' || perspective === 'track') ? true : false} \n          button={false}\n          name={album[0]} \n          onNavbarButtonPress={(perspective === 'special' || perspective === 'track') ? \n            this.navigateBack : this.collapseNavbar}\n          switchToSearch={this.switchToSearch}/>\n        </div>\n        {/* starting navigation and content container */}\n        <div className=\"mh-100 h-100 row\">\n          {\n            collapseClass ? (<NavigationBar \n              className={collapseClass}\n              showMusicianDisplay={this.showMusicianDisplay}\n              showTrackDisplay={this.showTrackDisplay}\n              showAlbumsDisplay={this.switchToAlbum}\n              showInstrumentDisplay={this.showInstrumentDisplay}\n              data1={data1} \n              data2={data2}\n              type1={type1}\n              type2={type2}\n            />) : null\n          }\n          \n          <div className=\"hide-scrollbar overflow-auto col w-75\">\n            <Timeline \n              data={timelineData}\n              highlighted={album.id} \n              move={moveTimeline}\n              moveEnd={this.moveEnd}\n              switchToAlbum={this.switchToAlbum} \n              style={{marginTop: -20, height: 200, top: 20,}}\n              />\n\n            {perspective !== 'track' ? \n              <AlbumGraph \n                className=\"mx-auto mb-5 w-75 h-75 box-shadow box-radius overflow-auto\"\n                type={perspective}\n                switchToAlbum={this.switchToAlbum}\n                hideMusicianDisplay={this.hideMusicianDisplay}\n                showMusicianDisplay={this.showMusicianDisplay}\n                showTrackDisplay={this.showTrackDisplay}\n                showInstrumentDisplay={this.showInstrumentDisplay}\n                hideInstrumentDisplay={this.hideInstrumentDisplay}\n                handleCollection={this.handleCollection}\n                data={elements}/> : \n              <TrackDisplay \n                className=\"mx-auto w-50 h-75 box-shadow box-radius overflow-auto\"\n                album={album}\n                name={trackName}\n                data={elements}\n                switchToMusician={this.switchToMusician}\n                hideTrackDisplay={this.hideTrackDisplay}/>\n            }\n          </div>\n        </div>\n      </div>\n    );\n  }\n  /**\n   * switching to musician\n   * @param {String} musicianName - name of the musician\n   */\n  switchToMusician = (musicianName) => {\n    var albumName = albumService\n      .getAlbumWithMusician(musicianName).id;\n\n    this.backToMusisian(musicianName, albumName)\n  }\n  /**\n   * callback to stop timeline moving\n   */\n  moveEnd = () => {\n    this.setState({moveTimeline: false});\n  }\n  /**\n   * setting all tracks of current album to component state\n   * @param album - current album\n   */\n  getTracksOfAlbum = (album) => {\n    return trackService.getAllTracksOfAlbum(album.id);\n  }\n  /**\n   * switching from current album to next album\n   * choosen by user  \n   * @param {string} albumName  - name of the next album chosen by user\n   */\n  switchToAlbum = (albumName) => {\n    this.props.history.push(`/album?n=${albumName}`);\n    this.setCurrentAlbum(albumName);\n  }\n\n  /**\n   * switching from album screen to next search screen\n   * @param {string} query - query\n   */\n  switchToSearch = (query) => {\n    this.props.history.push(`/search?q=${query}`);\n  }\n  /**\n   * setting album by name to current webpage state\n   * @param {string} albumName - name of the album\n   */\n  setCurrentAlbum = (albumName) => {\n    var album = albumService.getByName(albumName);\n\n    this.setState({\n      album: album,\n      trackName: '',\n      musicianName: '',\n      instrumentName: '',\n      perspective: 'album',\n      moveTimeline: true,\n    });\n  }\n  /**\n   * pushing perspective and name to data to navigation stack\n   * @param {String} perspective - perspective\n   * @param {String} name - name of element to show\n   */\n  pushToNavigationStack = (perspective, name) => {\n    this.navigationStack.push({perspective, name});\n  }\n  /**\n  * save current perspective\n  */\n  saveContext = () => {\n    const {perspective, album, musicianName, instrumentName} = this.state;\n\n    this.pushToNavigationStack('album', album.id);\n    \n    if(perspective === 'musician'){\n      this.pushToNavigationStack('musician', musicianName);\n    }else if(perspective === 'instrument'){\n      this.pushToNavigationStack('musician', musicianName);\n      this.pushToNavigationStack('instrument', instrumentName);\n    }\n  } \n  /**\n   * navigate back from special perspective\n   */\n  navigateBack = () => {\n    // todo: testing reasons\n    if(this.navigationStack.length > 0){\n      let lastState = this.navigationStack.pop();\n      // if the last state album, navigate to this album\n      if(lastState.perspective === 'album'){\n        this.setCurrentAlbum(lastState.name);\n      }else if(lastState.perspective === 'musician'){\n        let albumState = this.navigationStack.pop();\n        this.backToMusisian(lastState.name, albumState.name);\n      }else{\n        this.hideTrackDisplay();\n      }\n    }else{\n      this.hideTrackDisplay();\n    }\n  }\n  /**\n   * hide navbar\n   */\n  collapseNavbar = () => {\n    this.setState({collapseNavbar: !this.state.collapseNavbar});\n  }\n\n  /**\n   * show track description\n   * @param {string} trackName - track which description to show\n   */\n  showTrackDisplay = (trackName) => {\n    this.setState({\n      trackName: trackName, \n      perspective: 'track',\n      collapseNavbar: false,\n    });\n  }\n  /**\n   * show instrument display\n   * @param {string} trackName - track which description to show\n   */\n  showInstrumentDisplay = (name) => {\n    this.setState({\n      instrumentName: name,\n      perspective: 'instrument'\n    });\n  }\n\n  /**\n   * hide instrument display\n   */\n  hideInstrumentDisplay = () => {\n    this.setState({\n      instrumentName: '',\n      perspective: 'musician'\n    });\n  }\n\n  /**\n   * hide track display\n   */\n  hideTrackDisplay = () => {\n    this.setState({\n      trackName: '',\n      perspective: 'album'\n    });\n  }\n  /**\n   * handle collection of selected nodes different for each \n   * perspective.\n   * \n   * there are special cases for musicians, albums and instruments perspective.\n   * e.g.: if the user selects musicians on the album's perspective \n   * the special function should return data with albums where this musicians \n   * have played together. \n   * @param {Array} elements - array with selected cytoscape nodes\n   */\n  handleCollection = (elements) => {\n    var {perspective} = this.state;\n\n    switch(perspective){\n      // handling selected musicians of the albums perspective\n      case 'album': \n        this.specialCaseFunction = getCompoundForMusicians;\n        break;\n      case 'musician':\n        // function shows \n        this.specialCaseFunction = getCompoundForAlbums;\n        break;\n      default: \n        break;\n    }\n    // storing returned collection in class variable to \n    // process it by rerender later\n    this.data = elements;\n    // saving current context\n    this.saveContext();\n    this.setState({perspective: 'special', collapseNavbar: false});\n  }\n  /**\n   * calling this function when need back from special perspective\n   * to musicians perspective\n   * @param {String} musicianName - name of the musician\n   * @param {String} albumName - name of the album\n   */\n  backToMusisian = (musicianName, albumName) => {\n    this.setState({\n      musicianName: musicianName,\n      albumName: albumName,\n      instrumentName: '',\n      perspective: 'musician',\n    });\n  }\n  /**\n   * showing musician perspective\n   * @param {string} musicianName - album name\n   */\n  showMusicianDisplay = (musicianName) => {\n    this.setState({\n      musicianName: musicianName,\n      instrumentName: '',\n      perspective: 'musician',\n    });\n  }\n  /**\n   * hiding musicians display\n   */\n  hideMusicianDisplay = () => {\n    this.setState({\n      musicianName: '',\n      trackName: '',\n      perspective: 'album',\n    });\n  }\n}\n\nexport default withRouter(AlbumRoute);","import React, { Component } from 'react';\nimport './home-route.css';\nimport { withRouter } from 'react-router-dom';\nimport image from '../../assets/start-screen.png';\n/**\n * @author Pavlo Rozbytskyi\n * Home component is just html website representing \n * whole project \n */\nclass HomeRoute extends Component {\n\tcomponentDidMount () {\n\t\t//just be sure that all components except home are hidden\n\t\tthis.props.showHome();\n\t}\n\n\trender() {\n\t\t// don't render this component if it shoudn't be active\n\t\tif(!this.props.active)\n\t\t\treturn null;\n    return (\n\t\t\t<div>\n\t\t\t\t{this.getNavigationBar()}\n\t\t\t\t{this.getJumbotron()}\n\t\t\t\t{this.getContent()}\n\t\t\t\t{/* <!-- root application container --> */}\n    \t\t<div className=\"container\">\n\t\t\t\t\t{this.getApplicationContainer()}\n    \t\t</div>\n\t\t\t\t{this.getCredits()}\n\t\t\t\t{this.getFooter()}\n\t\t\t</div>\n    );\n\t}\n\t// container with image of the application and green button \n\t// to step into the application \n\tgetApplicationContainer = () => {\n\t\treturn <div className=\"vertical-container\">\t\t\t\t\n\t\t\t\t{/* start application container */}\n\t\t\t\t<div className=\"app-container\">\n\t\t\t\t\t{/* application screens */}\n\t\t\t\t\t<img className=\"img-fluid rounded mg-fluid img-thumbnail\" src={image} alt=\"start screen foto\" />\n\t\t\t\t</div>\n\t\t\t\t{/* end application container */}\n\n\t\t\t\t{/* button container start */}\n\t\t\t\t<div className=\"horizontal-container start-button-container\">\n\t\t\t\t\t<button className=\"btn btn-success\" onClick={() => this.props.history.push(`/album`)}>\n\t\t\t\t\t\tshow albums\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t{/* button container end */}\n\t\t\t</div>\n\t}\n\t// jumbotron\n\tgetJumbotron = () => {\n\t\treturn <div className=\"jumbotron\">\n\t\t\t<h1 className=\"display-4\">Miles Davis Discography</h1>\n\t\t\t<p className=\"lead\">Hey, try to explore complex Miles Davis discography dataset \n\t\t\t\twith Neo4j.\n\t\t\t</p>\n\n\t\t\t<p className=\"lead jumbo-button\">\n\t\t\t\t<a className=\"btn btn-primary btn-lg\" href=\"album\" target=\"_blank\" role=\"button\">Explore dataset &raquo;</a>\n\t\t\t</p>\n\t\t</div>\n\t}\n\t// navbar of the website\n\tgetNavigationBar = () => {\n\t\treturn <nav className=\"navbar navbar-expand-lg navbar-light\">\n      <a className=\"navbar-brand\" href=\"/#\">\n\t\t\t\t<img src=\"./assets/alto-saxophone.gif\" alt=\"alto saxophone\" width=\"40\"/>\n\t\t\t</a>\n      <button className=\"navbar-toggler\" type=\"button\" \n\t\t\t\tdata-toggle=\"collapse\" data-target=\"#navbarNav\" \n\t\t\t\taria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n        <span className=\"navbar-toggler-icon\"></span>\n      </button>\n      <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n        <ul className=\"navbar-nav\">\n          <li className=\"nav-item active\" data-toggle=\"collapse\" data-target=\".navbar-collapse.show\">\n            <a className=\"nav-link\" href=\"/#\">Home <span className=\"sr-only\">(current)</span></a>\n          </li>\n          <li className=\"nav-item\"  data-toggle=\"collapse\" >\n              <a className=\"nav-link\" href=\"#about\" data-target=\".navbar-collapse.show\">About</a>\n          </li>\n          <li className=\"nav-item\" data-toggle=\"collapse\">\n            <a className=\"nav-link\" href=\"#exploration\" data-target=\".navbar-collapse.show\">Explore</a>\n          </li>\n          <li className=\"nav-item\">\n              <a className=\"nav-link\" href=\"#contact\">Contact</a>\n          </li>\n        </ul>\n      </div>\n    </nav>\n\t}\n\t// content of the project description\n\tgetContent = () => {\n\t\treturn <div>\n\t\t\t<a alt=\"about section\" name=\"about\"/>\n\n\t\t\t<div className=\"container\">\n\t\t\t\t<div className=\"row padding\">\n\t\t\t\t\t<div className=\"col-lg-6\">\n\t\t\t\t\t\t<h2>Project description</h2>\n\t\t\t\t\t\t\n\t\t\t\t\t\t<p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Maxime possimus consectetur sed quibusdam veritatis et iusto quae hic sequi </p>\n\t\t\t\t\t\t<p>ratione corporis perspiciatis quas, ad cupiditate impedit iure odit reiciendis ducimus.ratione corporis perspiciatis quas, ad cupiditate impedit iure odit reiciendis ducimus.</p>\n\t\t\t\t\t\t<br/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"col-lg-6\">\n\t\t\t\t\t\t\t<img alt=\"graph representation\" src=\"assets/davis.png\" className=\"img-fluid \"/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n    \t</div>\n\n\t\t\t<hr className=\"col-xs-12\"></hr>\n\n\t\t\t<div className=\"card-holder container\">\n        <div className=\"row\">\n\t\t\t\t\t{/* <!-- neo4j container --> */}\n\t\t\t\t\t<div className=\"col-md-4 custom-card d-flex align-items-stretch\">\n\t\t\t\t\t\t<div className=\"card text-center\">\n\t\t\t\t\t\t\t<img src=\"assets/miles-davis.png\" className=\"card-img-top\" alt=\"vis js logo\"></img>\n\t\t\t\t\t\t\t<div className=\"card-body\">\n\t\t\t\t\t\t\t\t<h5 className=\"card-title\">Discography of Miles Davis</h5>\n\t\t\t\t\t\t\t\t<p className=\"card-text\">Miles Davis was an American jazz trumpeter, bandleader, and composer. He is among the most influential and acclaimed figures in the history of jazz and 20th century music.</p>\n\t\t\t\t\t\t\t\t<a target=\"blank\" href=\"https://en.wikipedia.org/wiki/Miles_Davis\" className=\"btn btn-outline-primary\">More info&raquo;</a>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t{/* <!-- neo4j container --> */}\n\t\t\t\t\t<div className=\"col-md-4 custom-card d-flex align-items-stretch\">\n\t\t\t\t\t\t<div className=\"card text-center\">\n\t\t\t\t\t\t\t<img src=\"assets/neo4j.png\" className=\"card-img-top\" alt=\"vis js logo\"></img>\n\t\t\t\t\t\t\t<div className=\"card-body\">\n\t\t\t\t\t\t\t\t<h5 className=\"card-title\">Neo4j - the graph database</h5>\n\t\t\t\t\t\t\t\t<p className=\"card-text\">Neo4j is a highly scalable native graph database, purpose-built to leverage not only data but also data relationships.\n\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t<a target=\"blank\" href=\"https://neo4j.com/\" className=\"btn btn-outline-primary\">More info&raquo;</a>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t{/* <!-- neovis container --> */}\n\t\t\t\t\t<div className=\"col-md-4  custom-card d-flex align-items-stretch\">\n\t\t\t\t\t\t\t<div className=\"card text-center\">\n\t\t\t\t\t\t\t\t<img src=\"assets/vis-js.png\" className=\"card-img-top\" alt=\"vis js logo\"></img>\n\t\t\t\t\t\t\t\t<div className=\"card-body\">\n\t\t\t\t\t\t\t\t\t<h5 className=\"card-title\">Vis.js visualization</h5>\n\t\t\t\t\t\t\t\t\t<p className=\"card-text\">The library is designed to be easy to use, to handle large amounts of dynamic data, and to enable manipulation of and interaction with the data.</p>\n\t\t\t\t\t\t\t\t\t<a target=\"blank\" href=\"https://visjs.org/\" className=\"btn btn-outline-primary\">More info&raquo;</a>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t</div>\n    \t</div>\n\t\t\t<hr className=\"col-xs-12\"></hr>\n\t\t</div>\n\t}\n\t// credits of the webpage\n\tgetCredits = () => {\n\t\treturn <div>\n\t\t\t<div className=\"container credits\">\n\t\t\t\t<p>\n\t\t\t\t\tPhoto by Alex Paganelli on Unsplash\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t\t<hr className=\"col-xs-12\"></hr>\n\t\t</div>\n\t}\n\t// footer of the webpage\n\tgetFooter = () => {\n\t\treturn <footer className=\"page-footer font-small my-footer\">\n\t\t\t<a name=\"contact\"> </a>\n\n      <div className=\"container text-center text-md-left\">\n      <p className=\"lead\">Lorem ipsum dolor sit amet consectetur, adipisicing elit. Excepturi, est qui distinctio recusandae veritatis soluta aliquid dolorem laboriosam eligendi aspernatur alias libero vel quibusdam quo facilis cumque iusto repudiandae dolor.</p>\n      </div>\n      \n      {/* <!-- Copyright --> */}\n      <div className=\"footer-copyright text-center py-3\">© 2019 Copyright:\n        <a target=\"blank\" href=\"https://rozbitski.de\"> rozbitski.de</a>\n      </div>\n    </footer>\n\t}\n}\n\nexport default withRouter(HomeRoute);","import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Badge from 'react-bootstrap/Badge';\nimport './menu.css';\n\nconst StyledMenuItem = withStyles(theme => ({\n  root: {\n    '&:focus': {\n      backgroundColor: theme.palette.primary.main,\n      margin: '1px',\n      'border-top-left-radius': '5px',\n      'border-top-right-radius': '5px',\n      'border-bottom-left-radius': '5px',\n      'border-bottom-right-radius': '5px',\n      '& .MuiListItemIcon-root, & .MuiListItemText-primary': {\n        color: theme.palette.common.white,\n        'font-weight': 'bold',\n      },\n    },\n  },\n}))(MenuItem);\n\n\nexport default function CustomizedMenus(props) {\n  function getMenuListItems (data) {\n    var menuItems = [];\n\n    data.forEach((item, index) => {\n      var classes = \"\"\n      if(index === 0){\n        classes = \"first-menu-item menu-item\";\n      }else if(index === data.length - 1){\n        classes = \"last-menu-item menu-item\";\n      }else{\n        classes = \"menu-item\";\n      }\n\n      menuItems.push(\n        <div key={index} className={classes} onClick={() => props.changeMenuItem(item.name)}>\n          <StyledMenuItem>\n            <ListItemText primary={item.name} />\n              <Badge pill variant={item.count === 0 ? \"light\" : \"info\"}>{item.count}</Badge>\n          </StyledMenuItem>\n        </div>\n      )\n    });\n\n    return menuItems;\n  }\n\n  return (\n    <div className=\"menu-container\">\n      {getMenuListItems(props.data)}\n    </div>\n  );\n}","import '../album-route/album-route.css';\n\nimport React, { Component } from 'react';\nimport Graph from '../../components/album-graph/graph';\nimport CustomizedMenus from './menu/menu';\nimport queryString from 'query-string';\nimport { withRouter } from 'react-router-dom';\nimport { SearchBar } from '../../components';\nimport { \n  getCytoAlbum, getCytoMusician, getCytoTrack, getCytoInstrument \n} from '../../presentation/converter';\n\nimport { \n  instrumentService, albumService, musicianService, trackService\n } from '../../service';\n/**\n * @author Pavlo Rozbytskyi\n * Search component to handle searching data in the \n * discographie.\n */\nclass SearchRoute extends Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      type: '', // type allows user to filter results \n    }\n  }\n\n  componentDidMount () {\n    // be sure that all another screens are disabled when \n    // search screen must be showed\n    this.props.showSearchScreen();\n  }\n\n  render() {\n    // don't show this component if not active\n    if(!this.props.active)\n      return null;\n\n    //parsing browser search-bar query\n    const values = queryString.parse(this.props.location.search);\n    // check q parameter is defined in search-bar\n    const query = values.q ? values.q : '';\n    // finding all data user is searching for\n    var instruments = instrumentService.getAllContainingSubstring(query);\n    var albums = albumService.getAllContainingSubstring(query);\n    var tracks = trackService.getAllContainingSubstring(query);\n    var musicians = musicianService.getAllContainingSubstring(query);\n    // counting results to print it out for the user\n    var count = instruments.length + albums.length + musicians.length + tracks.length;\n    // data array where are all finded elements stored \n    var data = [];\n    // user has ability to filter data by type \n    // and then data of some type will be shown on the screen\n    switch(this.state.type){\n      // display data only certain type \n      case \"Albums\": \n        // converting array with albums to array with cytoscape albums\n        data = [...albums.map(elem => getCytoAlbum(elem))];\n        break;\n      case \"Instruments\": \n        data = [...instruments.map(elem => getCytoInstrument(elem))];\n        break;\n      case \"Musicians\": \n        data = [...musicians.map(elem => getCytoMusician(elem))];\n        break;\n      case \"Tracks\": \n        data = [...tracks.map(elem => getCytoTrack(elem))];\n        break;\n      // by default show all results\n      default: \n        data = [\n          ...albums.map(elem => getCytoAlbum(elem)), \n          ...musicians.map(elem => getCytoMusician(elem)),\n          ...tracks.map(elem => getCytoTrack(elem)),\n          ...instruments.map(elem => getCytoInstrument(elem))\n        ];\n        break;\n    }\n\n    return (\n      <div className=\"fill\">\n        <SearchBar\n          back={true}\n          name={\"Search results\"} \n          onNavbarButtonPress={() => {\n            this.props.history.goBack();\n          }}\n          switchToSearch={this.processSearch}/>\n\n        <div className=\"container d-flex flex-col fill\">\n          {/* Menu container */}\n          <div>\n            <CustomizedMenus \n              changeMenuItem={this.chooseFilterType}\n              data={[\n                {name: 'Albums', count: albums.length}, \n                {name: 'Musicians', count: musicians.length},\n                {name: 'Instruments', count: instruments.length}, \n                {name: 'Tracks', count: tracks.length}\n              ]}/>\n          </div>\n          {/* container with results */}\n          <div className=\"full-width results-container\">\n            <h3 className=\"display-7\">Showing  {count} available result{count !== 1 ? 's' : ''}</h3>\n            <hr/>\n            <div className=\"box-shadow box-radius h-75 w-100\">\n              <Graph \n                className=\"h-100 w-100\"\n                switchToAlbum={this.switchToAlbum}\n                hideMusicianDisplay={() => {}}\n                showMusicianDisplay={this.switchToMusician}\n                showTrackDisplay={() => {}}\n                showInstrumentDisplay={() => {}}\n                hideInstrumentDisplay={() => {}}\n                handleCollection={() => {}}\n                type=\"special\"\n                data={data}/>\n              </div>\n          </div>\n        </div>\n        {/* starting navigation and content container */}\n      </div>\n    );\n  }\n\n  /**\n   * after users press to filter results this function\n   * gives you wanted data type should be displayed \n   */\n  chooseFilterType = (type) => {\n    this.setState({type: type});\n  } \n  /**\n   * switching to album\n   */\n  switchToAlbum = (albumName) => {\n    this.props.history.push(`/album?n=${albumName}`);\n  }\n  /**\n   * processing new search\n   * @param {String} query - search query\n   */\n  processSearch = (query) => {\n    this.setState({type: ''});\n    this.props.history.push(`/search?q=${query}`)\n  }\n  /**\n   * switching to musician\n   */\n  switchToMusician = (musicianName) => {\n    var albumName = albumService.getFirstAlbum().id;\n    var query = queryString.stringify({n: albumName, m: musicianName});\n    this.props.history.push(`/album?${query}`);\n  }\n}\n\nexport default withRouter(SearchRoute);","import React from 'react';\nimport './App.css';\nimport 'font-awesome/css/font-awesome.min.css';\n\nimport { AlbumRoute, HomeRoute, SearchRoute } from './routes';\nimport {\n  BrowserRouter as Router,\n  Route,\n} from \"react-router-dom\";\n\n/**\n * @author Pavlo Rozbytskyi\n * This is main component of the application. \n *   \n * There are three main routes in this application: \n * 1. HomeRoute, 2. AlbumsRoute, 3. SearchRoute\n * Switching between routes is possible with React Router\n */\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n\n    this.state = {\n      //state variables needed to figure out active route\n      showHome: true,\n      showAlbums: false,\n      showSearch: false,\n    }\n  } \n\n  render () {\n    return (\n      // react router with three main routes\n      <Router>\n        <Route path='/' render={() => <HomeRoute\n           //if component is not active, it won't be rendered\n           active={this.state.showHome} \n           showHome={this.showHome}\n           showAlbums={this.showAlbums}/>\n        }/>\n        <Route path='/album' render={() => <AlbumRoute \n          active={this.state.showAlbums} \n          showAlbums={this.showAlbums}\n          showSearchScreen={this.showSearchScreen}/>\n        }/>\n        <Route path='/search' render={() => <SearchRoute \n          active={this.state.showSearch} \n          showSearchScreen={this.showSearchScreen}/>\n        }/>\n      </Router>\n    );\n  }\n  // hiding all screens except albums screen\n  showAlbums = () => {\n    this.setState({\n      showHome: false,\n      showAlbums: true,\n      showSearch: false,\n    });\n  }\n  // hiding all screens except home screen\n  showHome = () => {\n    this.setState({\n      showHome: true,\n      showAlbums: false,\n      showSearch: false,\n    });\n  }\n  // hiding all screens except search screen\n  showSearchScreen = () => {\n    this.setState({\n      showHome: false,\n      showAlbums: false,\n      showSearch: true,\n    });\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}