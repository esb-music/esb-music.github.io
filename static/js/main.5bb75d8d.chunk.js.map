{"version":3,"sources":["assets/musician-screen.png","assets/special-end-screen.png","assets/search-end-screen.png","components/search-bar/search-bar.js","components/navigation-bar/nav-section/nav-section.js","components/navigation-bar/navigation.js","scripts/helpers.js","scripts/constants.js","components/timeline/timeline-item/timeline-item.js","reducers/counterReducer.js","reducers/loginReducer.js","actions/fileActions.js","reducers/fileReducer.js","reducers/index.js","store.js","repository/albumRepository.js","repository/instrumentRepository.js","repository/musicianRepository.js","repository/trackRepository.js","service/AlbumService.js","service/InstrumentService.js","service/MusicianService.js","service/TrackService.js","components/timeline/triangle/triangle.js","components/timeline/timeline.js","components/visualizing/tooltip/musician-tooltip.js","components/visualizing/tooltip/album-tooltip.js","components/visualizing/tooltip/instrument-tooltip.js","components/visualizing/graph-styles/GraphStyles.js","components/visualizing/graph.js","components/visualizing/track-display.js","presentation/presenter.js","routes/album-route/album-route.js","network/fetchFiles.js","routes/home-route/home-route.js","routes/search-route/menu/menu.js","routes/search-route/search-route.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","display","breakpoints","up","search","position","borderRadius","shape","backgroundColor","fade","palette","common","white","marginLeft","width","searchIcon","height","pointerEvents","alignItems","justifyContent","inputRoot","color","inputInput","padding","transition","transitions","create","SearchAppBar","props","classes","className","AppBar","Toolbar","back","IconButton","onClick","onNavbarButtonPress","edge","aria-label","Typography","variant","noWrap","name","InputBase","onSubmit","event","alert","placeholder","type","input","onKeyDown","e","key","target","value","switchToSearch","inputProps","NavigationSection","getElementToRender","MenuItem","handleOnSectionClick","Box","fontSize","getAllTitles","elements","i","data","length","push","convertTitle","charAt","toUpperCase","substring","this","style","fontWeight","Component","NavigationBar","showTrackDisplay","showAlbumsDisplay","showMusicianDisplay","showInstrumentDisplay","collapseClass","type1","type2","data1","data2","getReleaseDateFromAlbum","album","released","lut","Array","fill","map","_","toString","getRandomValuesFunc","window","crypto","getRandomValues","dvals","Uint32Array","d0","d1","d2","d3","Math","random","uuid","formatUuid","validURL","url","RegExp","test","getDistanceBetweenAlbums","album1","album2","timeStamp","Date","getTime","timestamp","abs","TimelineItem","digIntoAlbum","switchToAlbum","_isActive","highlighted","state","mouseEntered","icon","date","itemId","activeNormal","activeHovered","itemClass","containerClass","onMouseEnter","setState","onMouseLeave","backgroundImage","backgroundSize","showTooltip","Tooltip","placement","isOpen","src","alt","paddingTop","getFullYear","getReleasedYearFromDate","counterReducer","action","loginReducer","fetchFilesSuccess","files","payload","fetchFilesFailture","error","initialState","loading","reducers","combineReducers","counter","loggedIn","fileState","createStore","__REDUX_DEVTOOLS_EXTENSION__","albumRepository","getAll","allAlbums","getValidated","albums","validated","id","label","recorded","filter","studios","producers","musicians","store","subscribe","getState","instrumentRepository","allInstruments","instruments","instrument","musicianRepository","allMusicians","element","musician","birthdate","deathdate","trackRepository","allTracks","tracks","track","validAlbums","albumsName","Object","keys","newValues","values","ref","validatedAlbums","albumService","getFirstAlbum","getAlbumWithMusician","musicianName","includes","getByName","getMusiciansOfAlbum","forEach","mus","musicianService","elem","getContaining","query","instrumentService","filtered","getMusiciansOfInstrument","found","err","console","getInstrumentsNamesOfMusician","getAlbumsNamesOfMusician","getAlbumsOfMusician","albObjects","alb","log","trackService","getAllTracksOfAlbum","getAllTracksNamesOfAlbum","getRelationsInfo","trackName","albumName","getMusicianInstrumentRel","musNotFilter","relation","instNotFilter","Set","relations","convertedRel","entries","Triangle","left","right","triangleClass","Timeline","moveTimelineItems","timelineRef","current","isAlbumOnScreen","albumPos","positions","visibleLen","clientWidth","isAlbumRight","diff","scrollLeft","leftPos","getAllAlbumComponents","timeline","keyCounter","paddingLeft","distance","stroke","strokeWidth","x1","y1","x2","y2","album3","paddingRight","_handleLeftClick","_handleRightClick","highlithed","React","createRef","move","moveEnd","forceUpdate","flexDirection","alignSelf","MusicianTooltip","imgBlock","rel","href","AlbumTooltip","class","InstrumentTooltip","albumEdge","selector","musicianEdge","instrumentEdge","trackEdge","instrumentNode","content","nodeStyle","initial","string","names","split","initials","getInitials","svgImage","encodeURI","musicianStyle","albumStyle","instrumetStyle","Cytoscape","use","popper","coseBilkent","Graph","getTooltipOfNode","node","renderToString","callCount","selectedSize","handlePressOnAlbum","handlePressOnMusician","handlePressOnTrack","handlePressOnInstrument","show","musiciansStyle","JSON","parse","stringify","getMusicianStyle","getAlbumStyle","instrumentStyle","getInstrumentStyle","stylesheet","cy","layout","spacingFactor","run","unbind","bind","evt","dummyDomEle","document","createElement","popperRef","tip","tippy","appendTo","body","flip","interactive","sticky","animation","arrow","plugins","trigger","lazy","onCreate","instance","popperInstance","reference","innerHTML","popperOptions","positionFixed","selected","$","handleCollection","unselect","minZoom","maxZoom","TrackDisplay","getTooltip","hideTrackDisplay","faTimes","getCytoAlbum","getCytoMusician","getCytoInstrument","getCytoTrack","getEdge","source","destination","getCompoundForAlbums","nodes","commonMusicians","reduce","accumulator","index","array","edges","flatMap","albumMusicianEdges","getCompoundForMusicians","commonAlbums","AlbumRoute","switchToMusician","backToMusisian","moveTimeline","getTracksOfAlbum","history","setCurrentAlbum","specialCaseFunction","instrumentName","perspective","pushToNavigationStack","navigationStack","saveContext","navigateBack","lastState","pop","albumState","collapseNavbar","hideInstrumentDisplay","hideMusicianDisplay","queryString","location","n","m","timelineData","sort","a","b","collapsedMain","info","instObjects","instr","convMus","convInstr","convAlb","getMusicianPerspective","convMusic","getInstrumentPerspective","handler","musicianAvatar","unmountHTMLWhenHide","hideDelay","duration","hideOnClick","html","round","size","instrumentAvatar","getTrackPerspective","convAlbum","convTracks","convTrack","convMusician","getAlbumPerspective","heigth","button","marginTop","top","minWidth","maxHeight","withRouter","path","dispatch","fetch","json","albumsJSON","tracksJSON","musiciansJSON","instrumentsJSON","fetchFiles","HomeRoute","getApplicationContainer","config","homepage_config","screenshots_title","require","screenshots_musician","screenshots_special","screenshots_search","getJumbotron","jumbo_title","jumbo_subtitle","handlePress","jubmo_button","getNavigationBar","data-toggle","data-target","aria-controls","aria-expanded","getContent","project_title","project_description","goal_title","project_goal","discographies_title","discographies_description","getAllBands","getBandCard","band","discography","erkunden","homepage_discografies","getCredits","getFooter","StyledMenuItem","withStyles","primary","main","margin","CustomizedMenus","menuItems","item","changeMenuItem","ListItemText","Badge","pill","count","getMenuListItems","SearchRoute","chooseFilterType","processSearch","q","goBack","App","showAlbums","showHome","showSearch","showSearchScreen","render","Boolean","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5bb75d8d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/musician-screen.0c29a680.png\";","module.exports = __webpack_public_path__ + \"static/media/special-end-screen.a1156287.png\";","module.exports = __webpack_public_path__ + \"static/media/search-end-screen.f10efbc8.png\";","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport InputBase from '@material-ui/core/InputBase';\nimport { fade, makeStyles } from '@material-ui/core/styles';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport SearchIcon from '@material-ui/icons/Search';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n    display: 'none',\n    [theme.breakpoints.up('sm')]: {\n      display: 'block',\n    },\n  },\n  search: {\n    position: 'relative',\n    borderRadius: theme.shape.borderRadius,\n    backgroundColor: fade(theme.palette.common.white, 0.15),\n    '&:hover': {\n      backgroundColor: fade(theme.palette.common.white, 0.25),\n    },\n    marginLeft: 0,\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      marginLeft: theme.spacing(1),\n      width: 'auto',\n    },\n  },\n  searchIcon: {\n    width: theme.spacing(7),\n    height: '100%',\n    position: 'absolute',\n    pointerEvents: 'none',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  inputRoot: {\n    color: 'inherit',\n  },\n  inputInput: {\n    padding: theme.spacing(1, 1, 1, 7),\n    transition: theme.transitions.create('width'),\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      width: 120,\n      '&:focus': {\n        width: 200,\n      },\n    },\n  },\n}));\n\nexport default function SearchAppBar(props) {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          {!props.back ?          \n            <IconButton\n              onClick={props.onNavbarButtonPress}\n              edge=\"start\"\n              className={classes.menuButton}\n              color=\"inherit\"\n              aria-label=\"open drawer\">\n                <MenuIcon />\n            </IconButton>  \n            : <IconButton\n              onClick={props.onNavbarButtonPress}\n              edge=\"start\"\n              className={classes.menuButton}\n              color=\"inherit\"\n              aria-label=\"back\">\n                <ArrowBackIcon />\n            </IconButton>\n          }\n          <Typography className={classes.title} variant=\"h6\" noWrap>\n            {props.name}\n          </Typography>\n          <div className={classes.search}>\n            <div className={classes.searchIcon}>\n              <SearchIcon />\n            </div>\n            <InputBase\n              onSubmit={event => alert('hello')}\n              placeholder=\"Search…\"\n              type=\"input\"\n              classes={{\n                root: classes.inputRoot,\n                input: classes.inputInput,\n              }}\n              onKeyDown={e => {\n                if(e.key === 'Enter' && e.target.value !== '') {\n                  props.switchToSearch(e.target.value);\n                }\n              }}\n              inputProps={{ 'aria-label': 'search' }}\n            />\n          </div>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n  ","import React, { Component } from 'react';\nimport './nav-section.css';\nimport Box from '@material-ui/core/Box';\nimport MenuItem from '@material-ui/core/MenuItem';\n/**\n * section to display all menu items\n * @author Pavlo Rozbytskyi\n */\nexport default class NavigationSection extends Component {\n  /**\n   * rendering menu element\n   */\n  getElementToRender = (name, key) => {\n    return (\n      <div key={key}>\n        <MenuItem onClick={() => this.props.handleOnSectionClick(name, this.props.type)}>\n          <Box fontSize={18}>\n            {name}\n          </Box>\n        </MenuItem>\n      </div>\n    )\n  }\n  /**\n   * getting all titles to render\n   */\n  getAllTitles = () => {\n    var elements = [];\n\n    for(var i = 0; i < this.props.data.length; i++){\n      elements.push(this.getElementToRender(this.props.data[i], i));\n    }\n\n    return elements;\n  }\n  /**\n   * @param {string} name passed title\n   * converting old title to new title format: title -> Titles\n   */\n  convertTitle = (name) => {\n    if(name){\n      return `${name.charAt(0).toUpperCase()}${name.substring(1)}s`;\n    }\n    return \"Titles\";\n  }\n  render() {\n    const {style, type, className} = this.props;\n    const title = this.convertTitle(type);\n\n    return (\n      <div className={`mh-50 ${className}`} style={style}>\n        <Box fontSize={18} fontWeight=\"600\">\n          {title}\n        </Box>\n        {/* <React.Fragment key=\"getIdFromName\"> */}\n          {/* <div style={{overflowX: 'hide'}}> */}\n          {this.getAllTitles()}\n        {/* </React.Fragment> */}\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport './navigation.css';\nimport NavigationSection from './nav-section/nav-section';\n\nexport default class NavigationBar extends Component {\n  /**\n   * handle click on menu item of different types\n   */\n  handleOnSectionClick = (name, type) => {\n    switch(type){\n      case \"track\": \n        this.props.showTrackDisplay(name);\n        break;\n      case \"album\": \n        this.props.showAlbumsDisplay(name);\n        break;\n      case \"musician\": \n        this.props.showMusicianDisplay(name);\n        break;\n      case \"instrument\": \n        this.props.showInstrumentDisplay(name);\n        break;\n      default: \n        break;\n    }\n  }\n\n  render() {\n    const { collapseClass, type1, type2, data1, data2, className } = this.props;\n    {/* <div className=\"navigation-container\"> */}\n    if(!collapseClass) return null;\n    return (\n        <div className={`${className} navigation-container mh-100 no-scrollbar`}>\n          <NavigationSection \n            className=\"my-2\"\n            data={data1} \n            type={type1}\n            handleOnSectionClick={this.handleOnSectionClick}/>\n        \n        {type2 !== '' ? \n          (\n            <NavigationSection \n              data={data2} \n              type={type2}\n              handleOnSectionClick={this.handleOnSectionClick}/>\n          ) : null}\n      </div>\n    );\n  }\n}\n","import {pixelsPerYear} from './constants';\n\n// extracting release date from album\nexport const getReleaseDateFromAlbum = (album) => {\n    if(album){\n\t\t\treturn album.released;\n    }\n    return '';\n}\n/**lookup table*/\nconst lut = Array(256).fill().map((_, i) => (i < 16 ? '0' : '') + (i).toString(16));\n/**formatting uuid */\nconst formatUuid = ({d0, d1, d2, d3}) =>\n  lut[d0 & 0xff] + lut[(d0 >> 8) & 0xff] + lut[(d0 >> 16) & 0xff] + lut[(d0 >> 24) & 0xff] + '-' +\n  lut[d1 & 0xff] + lut[(d1 >>  8) & 0xff] + '-' +\n  lut[((d1 >> 16) & 0x0f) | 0x40] + lut[(d1 >> 24) & 0xff] + '-' +\n  lut[(d2 & 0x3f) | 0x80] + lut[(d2 >>  8) & 0xff] + '-' +\n  lut[(d2 >> 16) & 0xff] + lut[(d2 >> 24) & 0xff] +\n  lut[d3 & 0xff] + lut[(d3 >> 8) & 0xff] +\n  lut[(d3 >> 16) & 0xff] + lut[(d3 >> 24) & 0xff];\n/**getting valued for uuid */\nconst getRandomValuesFunc = window.crypto && window.crypto.getRandomValues ?\n  () => {\n    const dvals = new Uint32Array(4);\n    window.crypto.getRandomValues(dvals);\n    return {\n      d0: dvals[0],\n      d1: dvals[1],\n      d2: dvals[2],\n      d3: dvals[3],\n    };\n  } :\n  () => ({\n    d0: Math.random() * 0x100000000 >>> 0,\n    d1: Math.random() * 0x100000000 >>> 0,\n    d2: Math.random() * 0x100000000 >>> 0,\n    d3: Math.random() * 0x100000000 >>> 0,\n  });\n/**RFC compliant getting unique uuid numbers */\nexport const uuid = () => formatUuid(getRandomValuesFunc());\n\n/**\n * checking valid url\n * @param {String} url \n */\nexport const validURL = url => {\n  var pattern = new RegExp('^(https?:\\\\/\\\\/)?'+ // protocol\n    '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|'+ // domain name\n    '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))'+ // OR ip (v4) address\n    '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*'+ // port and path\n    '(\\\\?[;&a-z\\\\d%_.~+=-]*)?'+ // query string\n    '(\\\\#[-a-z\\\\d_]*)?$','i'); // fragment locator\n  return !!pattern.test(url);\n}\n// converting timestamp to years \nexport const convertTimestampToYears = (timestamp) => {\n    if(timestamp)\n        return Math.abs(timestamp / (1000 * 60 * 60 * 24 * 365)); \n    return 0;\n}\n// extracting release date from album\nexport const getDistanceBetweenAlbums = (album1, album2) => {\n    if(album1 && album2){\n        var timeStamp = new Date(getReleaseDateFromAlbum(album1)).getTime() - \n            new Date(getReleaseDateFromAlbum(album2)).getTime();\n        return convertTimestampToYears(timeStamp) * pixelsPerYear;\n    } \n    return 0;\n}\n\nexport const getIdFromName = (name) => {\n    return name.replace(/:/g, '_')\n      .replace(/\\s/g, '_')\n      .replace(/,/g, '')\n      .replace(/\\//g, '')\n      .replace(/'/g, '')\n      .replace(/`/g, '_')\n      .replace(/-/g, '_')\n      .replace(/\\./g, '_');\n}\n\nexport const getReleasedYearFromDate = (date) => {\n  return new Date(date).getFullYear();\n}\n\n  /**\n   * update current albums if change occured\n   * @param {Array} prev - previous musicians\n   * @param {Array} current - current musicians to render\n   * @param {Number} maxIndex - max id of element\n   */\nexport const diffAlbums = (prev, current, maxIndex) => {\n  var curr = current.map(mus => mus[0]);\n  //getting compound musicians for previous album and new album\n  var compound = prev.filter(mus => curr.includes(mus.data.label));\n  // don't perform anything if no data changed\n  if(compound.length === prev.length)\n    return;\n  var coumpoundMaped = compound.map(mus => mus.data.label);\n  var newData = curr.filter(mus => !coumpoundMaped.includes(mus));\n  var newDataMaped = newData.map(name => {\n    return {data: {id: ++maxIndex, label: name}}\n  });\n  var elements = [...compound, ...newDataMaped];\n  return {maxIndex: maxIndex, elements: elements};\n}\n\n/**\n * getting initials\n * @param {String} string\n */\nexport const getInitials = (string) => {\n  var names = string.split(' '),\n  initials = names[0].substring(0, 1).toUpperCase();\n\n  if (names.length > 1) {\n    initials += names[names.length - 1].substring(0, 1).toUpperCase();\n  }\n  return initials;\n}","export const pixelsPerYear = 50;  \nexport const albumWidthTimeline = 110;  ","import React, { Component } from 'react';\nimport './timeline-item.css';\nimport { Tooltip } from 'reactstrap';\nimport {getReleasedYearFromDate} from '../../../scripts/helpers';\n\nexport default class TimelineItem extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n        mouseEntered: false,\n    };\n  }\n  \n  digIntoAlbum = () => {\n    const {name} = this.props;\n    this.props.switchToAlbum(name);\n  }\n\n  _isActive = (name) => {\n    if(name === this.props.highlighted)\n      return true;\n    return false;\n  }\n\n  render() {\n    const { icon, name, date, style, itemId} = this.props;\n    const activeNormal = this._isActive(name) ? \"item-container-active\" : \"\";\n    const activeHovered = this._isActive(name) ? \"item-container-hovered-active\" : \"\";\n\n    const itemClass = this.state.mouseEntered ? `item-container-hovered box-shadow ${activeHovered}` : `item-container box-shadow ${activeNormal}`\n    const containerClass = this.state.mouseEntered ? \"vertical-timeline-custom move-top\" : \"vertical-timeline-custom\"\n\n    return (\n      <div key={itemId} className={containerClass} style={style}>\n        {/* album container start */}\n        <div \n          onClick={this.digIntoAlbum}\n          onMouseEnter={() => this.setState({mouseEntered: !this.state.mouseEntered})} \n          onMouseLeave={() => this.setState({mouseEntered: !this.state.mouseEntered})}\n          className={itemClass}\n          style={{backgroundImage: `url(${icon})`, backgroundSize: 'contain'}}>\n          {/* start information about each album */}\n          {this.props.showTooltip ? \n            <Tooltip style={{borderRadius: 10,}} placement=\"left\" isOpen={this.state.mouseEntered} target={itemId}>\n              <div className=\"information-container\">\n                <img src={icon} alt=\"album\" width={150}/>\n                <p style={{paddingTop: 10}}>{name}</p>\n                <p>{date}</p>\n              </div>\n            </Tooltip> : null\n          }\n         \n          {/* end information about each album */}\n        </div>\n        {/* album container start */}\n\n        {/* date start */}\n        <div>\n          <p className=\"lead\">{getReleasedYearFromDate(date)}</p>\n        </div>\n        {/* date end */}\n    </div>\n    );\n  }\n}\n","const counterReducer = (state = 0, action) => {\n  switch(action.type){\n    case \"INCREMENT\":  \n      return state + 1;\n    case \"DECREMENT\": \n      return state - 1;\n    default: \n      return state;\n  }\n}\n\nexport default counterReducer;","const loginReducer = (state = false, action) => {\n  switch(action.type){\n    case \"SIGN_IN\": \n      return true;\n    default: \n      return state;\n  }\n}\n\nexport default loginReducer;","export const FETCH_FILES_BEGIN   = 'FETCH_FILES_BEGIN';\nexport const FETCH_FILES_SUCCESS = 'FETCH_FILES_SUCCESS';\nexport const FETCH_FILES_FAILTURE = 'FETCH_FILES_FAILTURE';\n\nexport const fetchFilesBegin = () => ({\n  type: FETCH_FILES_BEGIN\n});\n\nexport const fetchFilesSuccess = files => ({\n  type: FETCH_FILES_SUCCESS,\n  payload: { files }\n});\n\nexport const fetchFilesFailture = error => ({\n  type: FETCH_FILES_FAILTURE,\n  payload: { error }\n});","import {\n  FETCH_FILES_BEGIN,\n  FETCH_FILES_SUCCESS,\n  FETCH_FILES_FAILTURE,\n} from '../actions/fileActions';\n\nconst initialState = {\n  files: {},\n  loading: false,\n  error: null\n}\n\nexport default function productReducer(state = initialState, action) {\n  switch(action.type){\n    case FETCH_FILES_BEGIN: \n      return {\n        ...state,\n        loading: true,\n        error: null\n      }\n    case FETCH_FILES_SUCCESS: \n      return {\n        ...state,\n        loading: false,\n        files: action.payload.files\n      }\n    case FETCH_FILES_FAILTURE: \n      return {\n        ...state,\n        loading: false,\n        error: action.payload.error,\n        files: {}\n      }\n    default: \n      return initialState;\n  }\n}\n\n","import counterReducer from './counterReducer';\nimport loginReducer from './loginReducer';\nimport fileReducer from './fileReducer';\nimport { combineReducers } from 'redux';\n\nconst reducers = combineReducers({\n  counter: counterReducer, \n  loggedIn: loginReducer,\n  fileState: fileReducer\n});\n\nexport default reducers;","import { createStore, applyMiddleware } from 'redux';\nimport reducers from './reducers';\n\nexport default createStore(reducers, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());","import {validURL} from '../scripts/helpers';\nimport store from '../store';\n\n/**\n * @author Pavlo Rozbytskyi\n * @version 2.1.0 - added getting data from redux \n * album Data Access Object layer provides basic read functionality  \n */\nclass AlbumRepository {\n  /**\n   * getting and validating all albums from the file\n   * \n   * album objects have following properties\n   * {String} id - albums name \n   * {String} url - url to e.g. wikipedia or another website\n   * {String} icon - url to musicians picture, which should be displayed\n   * {String} label - label which published the album\n   * {String} released - release date\n   * {Array} recorded - array with the recording dates\n   * {Array} studios - studios, where the album is recorded\n   * {Array} producers - producers of the album\n   * {Array} musicians - musicians played on the album\n   */\n  constructor() {\n    this.allAlbums = [];\n    store.subscribe(() => {\n      let albums = store.getState().fileState.files.albums;\n      this.allAlbums = this.getValidated(albums ? albums : []);\n    });\n  }\n  /**\n   * getting all albums\n   */\n  getAll = () => {\n    return this.allAlbums;\n  }\n  /**\n   * validating all albums\n   * @param {Array} albums - albums\n   */\n  getValidated = (albums) => {\n    let converted = albums.map(album => {\n        // validating data from the file\n        var validated = {};\n        // skip the album if name inconsistent\n        if(!album || album.id === \"\"){\n          return null;\n        }\n        validated.id = album.id;\n        // checking valid url\n        if(validURL(album.url)){\n          validated.url = album.url;\n        }else{\n          validated.url = \"\";\n        }\n        // checking valid icon url\n        if(validURL(album.icon)){\n          validated.icon = album.icon;\n        }else{\n          validated.icon = \"\";\n        }\n        // check label\n        if(!album.label){\n          validated.label = \"\";\n        }\n        validated.label = album.label;\n        // checking release date\n        if(album.released === null){\n          validated.released = \"\";\n        }else{\n          validated.released = album.released;\n        }\n        // checking record dates array\n        if(album.recorded === null){\n          validated.recorded = [];\n        }else{\n          validated.recorded = album.recorded.filter(e => e !== null); \n        }\n        // checking studios array\n        if(album.studios === null){\n          validated.studios = [];\n        }else{\n          validated.studios = album.studios.filter(e => e !== null); \n        }\n        // checking producers array\n        if(album.producers === null){\n          validated.producers = [];\n        }else{\n          validated.producers = album.producers.filter(e => e !== null); \n        }\n        // checking musicians array\n        if(album.musicians === null){\n          validated.musicians = [];\n        }else{\n          validated.musicians = album.musicians.filter(e => e !== null); \n        }\n\n        return validated;\n      })\n      .filter(album => album !== null); //filtering inconsistent objects out\n\n      return converted;\n  }\n}\n\nexport const albumRepository = new AlbumRepository();","import {validURL} from '../scripts/helpers';\nimport store from '../store';\n\n/**\n * @author Pavlo Rozbytskyi\n * @version 2.1.0 - added data validation \n * instruments repository layer provides basic read functionality  \n */\nclass InstrumentRepository {\n    /**\n     * gettig all instrument objects from the file\n     * \n     * instrument objects have following properties\n     * {String} id - instruments name \n     * {String} url - link to the image\n     * {Array} musicians - musicians played on the instrument\n     */\n    constructor () {\n      this.allInstruments = [];\n\n      store.subscribe(() => {\n        let instruments = store.getState().fileState.files.instruments;\n        this.allInstruments = this.getValidated(instruments ? instruments : []);\n      });\n    }\n    /**\n    * getting all musicians\n    **/ \n    getAll = () => {\n      return this.allInstruments;\n    }\n\n    getValidated = (instruments) => {\n      return instruments\n      // validation all instruments data\n        .map(instrument => {\n          var validated = {};\n          // returning null if instrument not exist or name is invalid\n          if(!instrument.id || !instrument || instrument.id === \"\"){\n            return null; \n          }\n          validated.id = instrument.id;\n          // validating url of the image\n          if(!instrument.url || !validURL(instrument.url)){\n            validated.url = \"\";\n          }else{\n            validated.url = instrument.url;\n          }\n          // validating musicians played on this instrument\n          if(!instrument.musicians){\n            validated.musicians = [];\n          }else{\n            // filter out all invalid musicians\n            validated.musicians = instrument.musicians\n              .filter(e => e !== null && e !== \"\");\n          }\n          //retur validated instrument\n          return validated;\n        })\n        // filtering invalid instruments out\n        .filter(instrument => instrument !== null); \n    }\n}\n\nexport const instrumentRepository = new InstrumentRepository();","import {validURL} from '../scripts/helpers';\nimport store from '../store';\n\n/**\n * @author Pavlo Rozbytskyi\n * @version 2.1.0 - added getting data from redux \n * musicians Data Access Object layer provides basic read functionality  \n */\nclass MusicianRepository {\n  /**\n   * gettig all musician objects from the file\n   * \n   * musician objects have following properties\n   * {String} id - Musicians name \n   * {String} url - url to e.g. wikipedia or another website\n   * {String} icon - url to musicians picture, which should be displayed\n   * {Array} albums - albums names where this musician played \n   * {Array} instruments - instruments names which this musician played on\n   * {String} birthdate - birthdate of the musician \n   * {String} deathdate - deathdate of the musician\n   */\n  constructor() {\n    this.allMusicians = [];\n    store.subscribe(() => {\n      let musicians = store.getState().fileState.files.musicians;\n      this.allMusicians = this.getValidated(musicians ? musicians : []);\n    });\n  }\n  getAll = () => {\n    return this.allMusicians;\n  }\n\n  getValidated = musicians => {\n    return musicians.map(element => {\n      var musician = {};\n\n      // checking correct musician name, if not the object is broken\n      if(!element || element.id === \"\" || !element.id){\n        return null; \n      }\n      musician.id = element.id;\n\n      // checking valid url\n      if(element.url && validURL(element.url)){\n        musician.url = element.url;\n      }else{\n        musician.url = \"\";\n      }\n      \n      // checking valid icon url\n      if(element.icon && validURL(element.icon)){\n        musician.icon = element.icon;\n      }else{\n        musician.icon = \"\";\n      }\n      // checking albums \n      if(!element.albums || element.albums === null){\n        musician.albums = [];\n      }else{\n        musician.albums = element.albums.filter(e => e !== null && e !== \"\");;\n      }\n      // checking instruments\n      if(!element.instruments || element.instruments === null){\n        musician.instruments = [];\n      }else{\n        musician.instruments = element.instruments.filter(e => e !== null && e !== \"\");;\n      }\n      // checking birthdate\n      if(!element.birthdate || element.birthdate === null){\n        musician.birthdate = \"\";\n      }else{\n        musician.birthdate = element.birthdate;\n      }\n      // checking deathdate\n      if(!element.deathdate || element.deathdate === null){\n        musician.deathdate = \"\";\n      }else{\n        musician.deathdate = element.deathdate;\n      }\n      \n      return musician;\n    });\n    // filter out all inconsistent musicians\n    this.allMusicians.filter(e => e !== null && e !== \"\");\n  }\n}\n\nexport const musicianRepository = new MusicianRepository()","import store from '../store';\n\n/**\n * @author Pavlo Rozbytskyi\n * @version 2.1.0 - added getting data from redux \n * tracks Data Access Object layer provides basic read functionality  \n */\nclass TrackRepository {\n  /**\n   * gettig all track objects from the file\n   * \n   * track objects have following properties\n   * {String} id - track name \n   * {String} albums - albums where the track is in\n   */\n  constructor () { \n    this.allTracks = [];\n    store.subscribe(() => {\n      let tracks = store.getState().fileState.files.tracks;\n      this.allTracks = this.getValidated(tracks ? tracks : []);\n    });\n  }\n  getAll = () => {\n    return this.allTracks;\n  }\n\n  getValidated = tracks => {\n    return tracks\n      // validate all tracks\n      .map(track => { \n        var validated = {};\n        // returning null if track not exist or the name is invalid\n        if(!track.id || !track || track.id === \"\"){\n          return null; \n        }\n        validated.id = track.id;\n        // validating albums array\n        if(!track.albums){\n          validated.albums = [];\n        }else{\n          var validAlbums = track.albums\n            .filter(e => e !== null)\n            .map(albums => {\n              // validate albums name\n              var albumsName = Object.keys(albums)[0];\n\n              if(!albumsName || albumsName === \"\"){\n                return null;\n              }\n              // validate references\n              var newValues = Object.values(albums)[0]\n                .filter(ref => {\n                  // checking reference - musician to instrument exists\n                  if(!ref){\n                    return false;\n                  }\n                  //getting musician and instrument name from the reference\n                  var musician = Object.keys(ref)[0];\n                  var instrument = ref[musician];\n                  if(!musician || !instrument || musician === \"\" || instrument  === \"\"){\n                    return false;\n                  }\n                  return true;\n                });\n              var validatedAlbums = {};\n              validatedAlbums[albumsName] = newValues;\n              return validatedAlbums;\n            })\n            .filter(e => e && e !== null);\n          validated.albums = validAlbums;\n        }\n        return validated;\n      })\n      // filter invalid tracks out\n      .filter(track => track && track !== null);\n  }\n}\n\nexport const trackRepository = new TrackRepository();","import { albumRepository } from '../repository';\nimport { musicianService } from '.';\n/**\n * @author Pavlo Rozbytskyi\n * album service layer extends basic functionality from album repository\n */\nclass AlbumService {\n  /**\n   * getting first album or null if there aren't any albums in the file\n   */\n  getFirstAlbum = () => {\n    var albums = albumRepository.getAll();\n    return albums.length > 0 ? albums[0] : null;\n  }\n  /**\n   * getting first album where is given musician present or null of nowhere\n   * @param {String} musicianName - musician's name\n   */\n  getAlbumWithMusician = (musicianName) => {\n    var albums = albumRepository\n      .getAll()\n      .filter(album => album.musicians.includes(musicianName));\n\n    return albums.length > 0 ? albums[0] : null;\n  }\n  /**\n   * getting album by name or null of it don't exist\n   * @param {String} name - album name\n   */\n  getByName = (name) => {\n    var albums = albumRepository.getAll().filter(album => album.id === name);\n    return albums.length > 0 ? albums[0] : null;\n  }\n\n  /**\n   * getting all musicians of current album\n   * @param album - current album\n   */\n  getMusiciansOfAlbum = (album) => {\n    var musicians = [];\n    //interrupt function if album is null\n    if(!album){\n      return musicians;\n    }\n    album.musicians.forEach(mus => {\n      musicians.push(\n        musicianService.getByName(mus)\n      );\n    });\n    // filter null musicians out\n    musicians = musicians.filter(elem => elem && elem !== null);\n    return musicians;\n  }\n\n  /**\n   * getting all albums containing in their's names \n   * the search query\n   * @param {String} query - search query\n   */\n  getContaining = (query) => {\n    if(query === '')\n      return [];\n    return albumRepository\n      .getAll()\n      .filter(album => album && album !== null && album.id.includes(query));\n  }\n  /**\n   * getting all albums from the repository\n   */\n  getAll = () => albumRepository.getAll();\n}\n\nexport const albumService = new AlbumService();","import { instrumentRepository } from '../repository';\nimport { musicianService } from '../service'; \n/**\n * @author Pavlo Rozbytskyi\n * @version 2.0.0 \n * instrument service layer extends basic functionality from instrument dao\n */\nclass InstrumentService{\n  /**\n   * getting all instruments containing in their's names \n   * the search query\n   * @param {String} query - search query\n   */\n  getContaining = (query) => {\n    if(query === '')\n      return [];\n    return instrumentRepository\n      .getAll()\n      .filter(instrument => instrument && instrument !== null && \n        instrument.id.includes(query));\n  }\n/**\n * getting instrument by name or null of it don't exist\n * @param {String} name - instrument name\n */\n  getByName = (name) => {\n    var filtered = instrumentRepository.getAll().filter(instrument => instrument.id === name);\n    return filtered.length > 0 ? filtered[0] : null;\n  }\n  /**\n   * getting all musicians played on the instrument\n   * @param {string} name - name of the instrument\n   */\n  getMusiciansOfInstrument = (name) => {\n    // var instrument = this.getByName(name);\n    // return instrument[1].musicians;\n    var instrument = this.getByName(name);\n    if(!instrument){\n      return [];\n    }\n    var musicians = instrument.musicians\n      .map(mus => musicianService.getByName(mus))\n      .filter(e => e && e !== null);\n    return musicians;\n  } \n}\n\nexport const instrumentService = new InstrumentService();","import { musicianRepository } from '../repository';\nimport { albumService } from '.';\n/**\n * @author Pavlo Rozbytskyi\n * musician service layer extends basic functionality from musician dao\n */\nclass MusicianService {\n  /**\n   * getting musicians object by name\n   * returning null if object not found or error happened \n   * @param {String} name - musicians name\n   */\n  getByName = (name) => {\n    try{\n      var musician = {};\n\n      // filtering all musicians by name and getting \n      // first of filtered\n      var found = musicianRepository\n        .getAll()\n        .filter(musician => musician.id === name);\n      // if not found return null\n      if(found.length > 0){\n        return found[0];\n      }else{\n        return null;\n      }\n    }catch(err){\n      console.error(err);\n      return null;\n    }\n  }\n  /**\n   * getting all instruments played by musician\n   * @param {name} name - musicians name\n   */\n  getInstrumentsNamesOfMusician = (name) => {\n    var musician = this.getByName(name);\n\n    if(musician === null){\n      return [];\n    }\n    return musician.instruments.filter(e => e && e !== null);\n  }\n  /**\n   * getting all albums on which played musician\n   * @param {name} name - musicians name\n   */\n  getAlbumsNamesOfMusician = (name) => {\n    var musician = this.getByName(name);\n\n    if(musician === null){\n      return [];\n    }\n    return musician.albums.filter(e => e && e !== null);\n  }\n  /**\n   * getting all album objects of musician\n   * @param {string} name - musician name\n   */\n  getAlbumsOfMusician = (name) => {\n    var albObjects = [];\n    try{\n      var albums = this.getAlbumsNamesOfMusician(name);\n      albObjects = albums\n        .map(alb => albumService.getByName(alb))\n        .filter(alb => alb && alb !== null);\n    }catch(err){\n      console.log(err);\n    }\n    return albObjects;\n  }\n  /**\n   * getting all musicians containing in their's names \n   * search query\n   * @param {String} query - search query\n   */\n  getContaining = (query) => {\n    if(query === '')\n      return [];\n    var found = musicianRepository\n      .getAll()\n      .filter(musician => musician && musician !== null &&\n        musician.id.includes(query));\n      \n    return found;\n  }\n}\n\nexport const musicianService = new MusicianService(); \n","import { trackRepository } from '../repository';\n/**\n * @author Pavlo Rozbytskyi\n * track service layer extends basic functionality from track dao\n */\nclass TrackService {\n  /** \n   * getting track object by name or null if don't exist\n   * @param {string} name - track name\n   */\n  getByName = (name) => {\n    var filtered = trackRepository\n      .getAll()\n      .filter(track => track.id === name);\n\n    return filtered.length > 0 ? filtered[0] : null;\n  }\n  /**\n   * getting all tracks of the album\n   * @param {string} name - album name\n   */\n  getAllTracksOfAlbum = (name) => {\n    var tracks = this.getAllTracksNamesOfAlbum(name);\n\n    return tracks\n      .map(track => this.getByName(track))\n      .filter(track => track && track !== null);\n  }\n\n    /**\n   * getting all tracks names of the album\n   * @param {string} name - album name\n   */\n  getAllTracksNamesOfAlbum = (name) => {\n    var tracks = [];\n\n    try{\n      //getting all tracks\n      trackRepository.getAll().forEach(track => {\n        // going all albums of the track\n        track.albums.forEach(album => {\n          // checking name from parameter is equal to album name in track\n          // and pushing it to collection if not present\n          if(Object.keys(album)[0] === name && !tracks.includes(track.id)){\n            tracks.push(track.id);\n          }\n        });\n      });\n    }catch(err){\n      console.error(err);\n    }\n\n    return tracks.filter(track => track && track !== null);\n  }\n  /**\n   * getting information about - musician relations on track of certain album\n   * @param {string} trackName - track name \n   * @param {string} albumName - album name  \n   */\n  getRelationsInfo = (trackName, albumName) => {\n    let data          = this.getMusicianInstrumentRel(trackName, albumName);\n    let musNotFilter  = data.map(relation => Object.keys(relation)[0]);\n    let instNotFilter = data.map(relation => Object.values(relation)[0]);\n    // storing musician and instruments\n    let musicians = [...new Set(musNotFilter)];\n    let instruments = [...new Set(instNotFilter)];\n\n    return {musicians: musicians.length, instruments: instruments.length};\n  }\n  /**\n   * getting all instrument - musician relations on track of certain album\n   * @param {string} trackName - track name \n   * @param {string} albumName - album name  \n   */\n  getMusicianInstrumentRel = (trackName, albumName) => {\n    // finding track with trackName\n    var relations = trackRepository.getAll()\n      .filter(track => track.id === trackName);\n    // checking track exists and albums of track exist\n    if(!relations || !relations[0] || !relations[0].albums){\n      return [];\n    }\n    // loop over all albums of the track and find album with albumName\n    relations = relations[0].albums.filter(album => {\n        return Object.keys(album)[0] === albumName;\n    });\n    \n    if(!relations || !relations[0]){\n      return [];\n    }\n    var convertedRel = relations[0];\n    return Object.entries(convertedRel)[0][1];\n  }\n  /**\n   * getting all tracks containing in their's names \n   * the search query\n   * @param {String} query - search query\n   */\n  getContaining = (query) => {\n    if(query === '')\n      return [];\n    return trackRepository\n      .getAll()\n      .filter(track => track && track !== null && track.id.includes(query));\n  }\n}\n\nexport const trackService = new TrackService(); ","import React, { Component } from 'react';\nimport './triangle.css';\n\nexport default class Triangle extends Component {\n  render() {\n    const {right, left, ...props} = this.props;\n    const triangleClass = left ? \"triangle-left\" : \"triangle-right\";\n    return (\n      <div className={triangleClass} {...props} ></div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport TimelineItem from './timeline-item/timeline-item';\nimport './timeline.css';\nimport { getDistanceBetweenAlbums } from '../../scripts/helpers';\nimport { albumService } from '../../service';\nimport Triangle from './triangle/triangle';\nimport {albumWidthTimeline} from '../../scripts/constants';\n\n/**\n * component for displaying all albums\n * @author Pavlo Rozbytskyi\n * @version added getting data from parent \n */\nexport default class Timeline extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      timeline: [],\n      highlithed: '',\n    };\n    this.timelineRef = React.createRef();\n    // storing positions of albums in pixels\n    this.positions = {};\n  }\n  \n  render() {\n    const {style, className, move, moveEnd, highlighted} = this.props;\n    // move timeline if need\n    if(move){\n      this.moveTimelineItems();\n      // on the first render the ref.current ist null and \n      // you have to rerender component\n      if(this.timelineRef.current !== null){\n        moveEnd();\n      }else{\n        this.forceUpdate();\n      }\n    }\n\n    return (\n      <div className={className} style={{display: 'flex', flexDirection: 'row',  width: '100%',  height: 200}}>\n        <div className=\"triangle-container\" style={{alignSelf: 'center',}}> \n          <Triangle onClick={this._handleLeftClick} left={true}/> \n        </div>\n\n          <div ref={this.timelineRef} \n            className=\"timeline-container\" style={style}>\n            {this.getAllAlbumComponents()}\n          </div>\n        \n          <div className=\"triangle-container\" style={{alignSelf: 'center', paddingRight: 5}}>\n            <Triangle onClick={this._handleRightClick} right={true}/>\n          </div>\n        </div>\n    );\n  }\n  /**\n   * moving the timeline if need\n   */\n  moveTimelineItems = () => {\n    const {highlighted} = this.props; \n    // move timeline if ref initialized and album is not on the screen\n    if(this.timelineRef && this.timelineRef.current && \n      !this.isAlbumOnScreen(highlighted)){\n        // position of the album\n        var albumPos = this.positions[highlighted];\n        var visibleLen = this.timelineRef.current.clientWidth; \n        //move\n        if(this.isAlbumRight(highlighted)){\n          var rightPos = this.timelineRef.current.scrollLeft + visibleLen;\n          var diff     = (albumPos - rightPos) + (visibleLen / 6);\n          //moving right\n          this.timelineRef.current.scrollLeft += diff;\n        }else{\n          var leftPos = this.timelineRef.current.scrollLeft;\n          var diff    = (leftPos - albumPos) + (visibleLen / 6); \n          //moving left\n          this.timelineRef.current.scrollLeft -= diff;\n        }\n    }\n  }\n  /**\n   * checking the album is hidden right on the timeline\n   */\n  isAlbumRight = (name) => {\n    var albumPos   = this.positions[name];\n    var leftPos    = this.timelineRef.current.scrollLeft;\n    var visibleLen = this.timelineRef.current.clientWidth; \n\n    return albumPos > (visibleLen + leftPos);\n  }\n  /**\n   * checking the album is displayed\n   */\n  isAlbumOnScreen = (name) => {\n    var albumPos   = this.positions[name];\n    var leftPos    = this.timelineRef.current.scrollLeft;\n    var visibleLen = this.timelineRef.current.clientWidth; \n    \n    if(leftPos <= albumPos && (leftPos + visibleLen) >= albumPos){\n      return true;\n    }\n    return false;\n  }\n  /**\n   * getting converting all albums to timeline\n   */\n  getAllAlbumComponents = () => {\n    const {data, highlighted, switchToAlbum, showTooltip} = this.props; \n    // storing timeline in this array\n    var timeline = [];\n    // needed for react keys\n    var keyCounter = 0;\n    // current position\n    var position = 0;\n    for(var i = 0; i < data.length; i++){\n      if(i + 1 <  data.length){\n        // getting actual album data\n        var album1 = data[i];\n        var album2 = data[i + 1];\n\n        // adding position to positions array\n        this.positions[album1.id] = position;\n        // adding album to timeline\n        timeline.push(\n          <TimelineItem \n            highlighted={highlighted}\n            showTooltip={showTooltip}\n            switchToAlbum={switchToAlbum}\n            style={i === 0 ? {paddingLeft: 50,} : {}}\n            itemId={i}\n            key={keyCounter++}\n            name={album1.id} \n            icon={album1.icon} \n            date={album1.released}/>\n        );\n        // adding width of the album to current position to get position of the \n        // line start and than add distance to next album\n        var distance = getDistanceBetweenAlbums(album1, album2);\n        position += (distance + albumWidthTimeline); // so we get position of the next album\n        this.positions[album2.id] = position; \n        //line between two components\n        timeline.push(\n          <div key={keyCounter++} className=\"line-container\">\n            <svg width={distance} height='15px'>\n              <line stroke=\"#3B6295\" strokeWidth=\"20\" \n              x1=\"0\" y1=\"0\" x2={distance} y2=\"0\"/>  \n            </svg>\n          </div>\n        );\n      }else{\n        var album3 = data[i];\n        //add position of the last element to the positions object\n        this.positions[album3.id] = position;\n        // last element\n        timeline.push(\n          <TimelineItem \n            highlighted={highlighted}\n            showTooltip={showTooltip}\n            switchToAlbum={switchToAlbum}\n            style={{paddingRight: 50,}}\n            itemId={i}\n            key={keyCounter++}\n            name={album3.id} \n            icon={album3.icon} \n            date={album3.released}/>\n        );\n      }\n    }\n    return timeline;\n  }\n  /**\n   * moving timeline to left after pressing on left triangle\n   */\n  _handleLeftClick = (event) => {\n      this.timelineRef.current.scrollLeft -= 600;\n  }\n  /**\n   * moving timeline to right after pressing on right triangle\n   */\n  _handleRightClick = (event) => {\n    this.timelineRef.current.scrollLeft += 600;\n  }\n}\n","import './tooltip.css';\nimport React, { Component } from 'react';\n/**\n * @author Pavlo Rozbytskyi\n * @version 1.0.0\n * tooltip for musicians\n */\nexport default class MusicianTooltip extends Component {\n  render() {\n    const {musician} = this.props;\n    // getting deathdate of the musician\n    var deathdate = musician.deathdate !== \"\" ? (<p>deathdate: {musician.deathdate}</p>) : \"\";\n    // block with image\n    const imgBlock = musician.icon ?\n      (<div className=\"container text-center w-100\">\n        <img className=\"mx-auto\" src={musician.icon} alt={musician.label}/>\n      </div>) : null; // add react avatar\n\n    return (\n      <div className=\"container tooltip-container pt-5\">\n        {imgBlock}\n        <div className=\"container text-center text-wrap pb-3\">\n          <h4>{musician.id}</h4>\n          <p>involved in {musician.albums.length} albums</p>\n          <div className=\"text-wrap instruments-div\">\n            <p>played on {musician.instruments.toString()}</p>\n          </div>\n          <p>birthdate: {musician.birthdate}</p>\n          {deathdate}\n          <a rel=\"noopener noreferrer\" target=\"_blank\" href={musician.url}>link to the biography</a>\n        </div>\n      </div>\n    );\n  }\n}\n","import './tooltip.css';\nimport React, { Component } from 'react';\n/**\n * @author Pavlo Rozbytskyi\n * @version 1.0.0\n * tooltip for albums\n */\nexport default class AlbumTooltip extends Component {\n  render() {\n    const {album} = this.props;\n     // getting block with image\n    const imgBlock = album.icon ? \n    (<div class=\"container image-container\">\n      <img src={album.icon} alt={album.label}/>\n    </div>) : null; // add react avatar\n\n    return (\n       <div class=\"container tooltip-container\">\n        {imgBlock}\n\n        <div class=\"container text-center\">\n          <h4>{album.id}</h4>\n          <p>{album.musicians.length} musicians worked on</p>\n          <p>release date: {album.released}</p>\n          <p>label: {album.label}</p>\n          <p>producers: {album.producers}</p>\n          <a target=\"_blank\" href={album.url}>link to a album info</a>\n        </div>\n      </div>\n    );\n  }\n}\n","import './tooltip.css';\nimport React, { Component } from 'react';\n/**\n * @author Pavlo Rozbytskyi\n * @version 1.0.0\n * tooltip for instruments\n */\nexport default class InstrumentTooltip extends Component {\n  render() {\n    const {instrument} = this.props;\n     // getting block with image\n    const imgBlock = instrument.url ? \n    (<div className=\"container image-container pt-5 w-100\">\n      <img className=\"mx-auto\" src={instrument.url} alt={instrument.label}/>\n    </div>) : null; // add react avatar\n\n    return (\n       <div className=\"container tooltip-container\">\n        {imgBlock}\n\n        <div className=\"container text-center\">\n          <h4>{instrument.id}</h4>\n          <p>{instrument.musicians.length} musicians played on this instrumet</p>\n        </div>\n      </div>\n    );\n  }\n}\n","import {getInitials} from '../../../scripts/helpers';\n/**\n * this file contains all styles of cytoscape instance\n * @author Pavlo Rozbytskyi\n */\n\n  // sizes of secondary nodes e.g. musician node on \n // albums perspective\n const defaultWidth     = 100;\n const defaultHeight    = 100;\n const defaultBorder    = '5px';\n const trackWidth       = 50;\n const trackHeight      = 50;\n const edgeWidth        = 5;\n // sizes of main nodes e.g. musicians node \n // on musicians perspective\n const mainWidth     = 130;\n const mainHeight    = 130;\n const mainBorder    = '7px';\n const mainFontSize  = '20';\n // colors and shapes\n const musicianColor   = '#469B30';\n const whiteColor      = '#FFFFFF';\n const musicianShape   = 'ellipse';\n const albumShape      = 'square';\n const albumColor      = '#2E6299';\n const instrumentShape = 'diamond';\n const instrumentColor = '#f18867';\n const trackShape      = 'round-triangle';\n const trackColor      = '#E1AC3C';\n /**\n  * style of the album edge\n  */\n export const albumEdge = {\n  selector: 'edge[type=\"album\"]',\n  style: {\n    'line-color': albumColor,\n    'width': edgeWidth,\n  }\n };\n /**\n  * musicians edge style\n  */\n export const musicianEdge = {\n  selector: 'edge[type=\"musician\"]',\n  style: {\n    'line-color': musicianColor,\n    'width': edgeWidth,\n  }\n };\n /**\n  * instruments edge style\n  */\n export const instrumentEdge = {\n  selector: 'edge[type=\"instrument\"]',\n  style: {\n    'line-color': instrumentColor,\n    'width': edgeWidth,\n  }\n }\n /**\n  * edge to track style\n  */\n export const trackEdge = {\n  selector: 'edge[type=\"track\"]',\n  style: {\n    'line-color': trackColor,\n  }\n }\n /**\n  * styles of the instrument\n  */\n export const instrumentNode = {\n  selector: 'node[type=\"track\"]',\n  style: {\n    width: trackWidth,\n    height: trackHeight,\n    shape: trackShape,\n    content: 'data(label)',\n    'background-color': trackColor,\n    'background-image': 'none',\n  }\n }\n/**\n * general style of all nodes\n */\n export const nodeStyle = {\n  selector: 'node[icon]',\n  style: {\n    'background-fit': 'contain',\n    'background-image': function(elem){\n      // return image if exists\n      var icon = elem.data().icon;\n      if(icon && icon !== \"\" && icon !== 'none'){\n        return icon;\n      }\n      // create svg if not exist\n      const initial = getInitials(elem.data().label);\n      const svgImage = `<svg xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"46\" height=\"46\" \n        style=\"background-color:rgb(52, 73, 94);-moz-border-radius: 0px;\">\n        <text \n          style=\"font-size: 20px; font-weight: 400\"\n          font-family=\"HelveticaNeue-Light,Helvetica Neue Light,Helvetica Neue,\n          Helvetica,Arial,Lucida Grande,sans-serif\"  text-anchor=\"middle\" \n          y=\"50%\" x=\"50%\" dy=\"0.35em\" fill=\"white\">${initial}</text>\n        Sorry, your browser does not support inline SVG.\n      </svg>`\n      // creating url\n      const svgUrl = encodeURI(\"data:image/svg+xml;utf8,\" + svgImage);\n      //returning svg url\n      return svgUrl;\n    }\n  }\n }\n /**\n  * default style of musician\n  */\n const musicianStyle = {\n  selector: 'node[type=\"musician\"]',\n  style: {\n    width: defaultWidth,\n    height: defaultHeight,\n    shape: musicianShape,\n    content: 'data(label)',\n    'border-color': musicianColor,\n    'background-color': whiteColor,\n    'border-width': defaultBorder,\n    'text-margin-y': -10\n  }\n };\n\n /**\n   * getting style of musician nodes and edges for each perspective\n   * @param {string} type - type of perspective should be displayed\n   * possible types are: musician, track, album\n   */\n  export const getMusicianStyle = (type) => {\n    // deep copy\n    let musician = JSON.parse(JSON.stringify(musicianStyle));\n\n    switch(type){\n      //musician style on albums perspective\n      case \"album\":\n        musician.style['text-margin-y'] = -5;\n        break;\n      //musician style on musicians perspective\n      case \"musician\": \n        musician.style.width = mainWidth;\n        musician.style.height = mainHeight;\n        musician.style['border-width'] = mainBorder;\n        musician.style['font-weight'] = 'bold';\n        musician.style['font-size'] = mainFontSize;\n        break;\n      case \"special\": \n        musician.style['text-margin-y'] = '-5';\n        break;\n      default: \n        break;\n    }\n    return musician;\n  }\n  /**\n   * style of the album\n   */\n  const albumStyle = {\n    selector: 'node[type=\"album\"]',\n    style: {\n      width: defaultWidth,\n      height: defaultHeight,\n      shape: albumShape,\n      content: 'data(label)',\n      'border-color': albumColor,\n      'background-color': whiteColor,\n      'border-width': defaultBorder,\n      'text-margin-y': -10\n    }\n  };\n  /**\n   * getting style of album nodes and edges for each perspective\n   * @param {string} type - type of current perspective\n   * possible types are: musician, track, album\n   */\n  export const getAlbumStyle = (type) => {\n    let album = JSON.parse(JSON.stringify(albumStyle));\n\n    switch(type){\n      case \"musician\":\n        album.style['text-margin-y'] = '-5';\n        break;\n      case \"album\": \n        album.style.width = mainWidth;\n        album.style.height = mainHeight;\n        album.style['border-width'] = mainBorder;\n        album.style['font-weight'] = 'bold';\n        album.style['font-size'] = mainFontSize;\n        break;\n      case \"special\": \n        album.style['text-margin-y'] = '-5';\n        break;\n      default: \n        break;\n    }\n    return album;\n  }\n\n  /**\n   * default instrument's style\n   */\n  const instrumetStyle = {\n    selector: 'node[type=\"instrument\"]',\n    style: {\n      width: defaultWidth,\n      height: defaultHeight,\n      shape: instrumentShape,\n      content: 'data(label)',\n      'background-color': whiteColor,\n      'border-color': instrumentColor,\n      'border-width': defaultBorder,\n      'text-margin-y': -10\n    }\n  };\n  /**\n   * getting style of instrument nodes and edges for each perspective\n   * @param {string} type - type of perspective should be displayed\n   * possible types are: musician, track, album\n   */\n  export const getInstrumentStyle = (type) => {\n    // deep copy of the instrument\n    let instrument = JSON.parse(JSON.stringify(instrumetStyle));\n\n    switch(type){\n      case \"musician\": \n      instrument.style['text-margin-y'] = '-5';\n        break;\n      case \"instrument\":\n        instrument.style.width = mainWidth;\n        instrument.style.height = mainHeight;\n        instrument.style['border-width'] = mainBorder;\n        instrument.style['text-margin-y'] = '-10';\n        instrument.style['font-weight'] = 'bold';\n        instrument.style['font-size'] = mainFontSize;\n        break;\n      default: \n        break;\n    }\n    return instrumetStyle;\n  }","import './graph.css';\nimport React from 'react';\nimport CytoscapeComponent from 'react-cytoscapejs';\nimport Cytoscape from 'cytoscape';\nimport coseBilkent from 'cytoscape-cose-bilkent';\nimport popper from 'cytoscape-popper';\nimport tippy, {sticky} from 'tippy.js';\nimport ReactTooltip from 'react-tooltip'\nimport 'tippy.js/dist/tippy.css';\nimport { musicianService, albumService, instrumentService } from '../../service';\nimport { renderToString } from 'react-dom/server'\nimport {MusicianTooltip, AlbumTooltip, InstrumentTooltip} from './tooltip';\nimport {albumEdge, musicianEdge,\n  instrumentEdge, trackEdge, nodeStyle, instrumentNode,\n  getMusicianStyle, getAlbumStyle, getInstrumentStyle} from './graph-styles/GraphStyles';\n\nCytoscape.use( popper );\nCytoscape.use(coseBilkent);\n/**\n * @author Pavlo Rozbytskyi\n * component renders all musicians of each album\n */\nexport default class Graph extends React.Component {\n  constructor(props){\n    super(props);\n    // needed to fix event handlers of collections\n    this.callCount = 0;\n    this.selectedSize = 0;\n  }\n\n  render(){\n    // dont render component if album not set\n    if(this.props.data.length === 0)\n      return null;\n    const {\n      type, style, className,\n      handlePressOnAlbum,\n      handlePressOnMusician,\n      handlePressOnTrack,\n      handlePressOnInstrument,\n      show\n    } = this.props;\n\n    if(!show) return null;\n    // getting styles of musician, album, instrument\n    const musiciansStyle = getMusicianStyle(type);\n    const albumStyle = getAlbumStyle(type);\n    const instrumentStyle = getInstrumentStyle(type);\n\n    return (<CytoscapeComponent\n      style={style}\n      className={className}\n      stylesheet={[\n        musiciansStyle,\n        albumStyle,\n        instrumentStyle,\n        trackEdge,\n        instrumentEdge,\n        musicianEdge,\n        albumEdge,\n        nodeStyle,\n        instrumentNode\n      ]}\n      cy={(cy) => {\n        this.cy = cy;\n        this.cy.layout({name:'cose-bilkent', spacingFactor: 2}).run();\n        this.cy.unbind(\"tap\");\n\n        this.cy.bind('tap', 'node[type=\"album\"]', function(evt) {\n          handlePressOnAlbum(evt.target);\n        });\n\n        this.cy.bind('tap', 'node[type=\"musician\"]', function(evt) {\n          handlePressOnMusician(evt.target);\n        });\n\n        this.cy.bind('tap', 'node[type=\"instrument\"]', function(evt) {\n          handlePressOnInstrument(evt.target);\n        });\n\n        this.cy.bind('tap', 'node[type=\"track\"]', function(evt) {\n          handlePressOnTrack(evt.target);\n        });\n\n        this.cy.unbind(\"cxttap\");\n        this.cy.bind('cxttap', 'node', evt => {\n          let node = evt.target;\n          let dummyDomEle = document.createElement('div');\n          let ref = node.popperRef();\n          let tip = new tippy(dummyDomEle, { // tippy options:\n            // mandatory:\n            appendTo: document.body,\n            flip: [\"top\", \"left\"],\n            interactive: true,\n            sticky: true,\n            animation: 'scale',\n            arrow: false,\n            plugins: [sticky],\n            trigger: 'manual', // call show() and hide() yourself\n            lazy: false, // needed for onCreate()\n            // needed for `ref` positioning\n            onCreate: instance => { instance.popperInstance.reference = ref; },\n            // your custom options follow:\n            content: () => {\n              let content = document.createElement('div');\n              content.innerHTML = this.getTooltipOfNode(node);\n              return content;\n            },\n            popperOptions: {\n              positionFixed: true\n            }\n          });\n\n          if(node.data().type !== 'track')\n            tip.show();\n        });\n\n        this.cy.unbind(\"boxselect\");\n        this.cy.bind('boxselect', 'node', evt => {\n          if(this.callCount === 0){\n            var selected = this.cy.$('node:selected');\n            this.props.handleCollection(selected);\n            // call function to trigger\n            this.selectedSize = selected.length;\n            this.callCount++;\n          }else{\n            this.callCount++;\n          }\n\n          if(this.callCount >= this.selectedSize){\n            this.callCount = 0;\n            this.selectedSize = 0;\n            this.cy.$(':selected').unselect();\n          }\n        });\n      }}\n      minZoom={0.3}\n      maxZoom={5}\n      elements={this.props.data}\n      layout={{name: 'cose-bilkent', spacingFactor: 2}}\n      />)\n  }\n\n  /**\n   * getting tooltip html of node\n   */\n  getTooltipOfNode = (node) => {\n    var data = node.data();\n\n    switch(data.type){\n      case \"musician\":\n        //getting musician object\n        var musician = musicianService.getByName(data.label);\n        // displaing tooltip for the musician\n        return renderToString(<MusicianTooltip musician={musician}/>)\n      case \"album\":\n        //getting album object\n        var album = albumService.getByName(data.label);\n        // displaying album tooltip\n        return renderToString(<AlbumTooltip album={album}/>)\n      case \"instrument\":\n        //getting instrument object\n        var instrument = instrumentService.getByName(data.label);\n        //displaying instrument tooltip\n        return renderToString(<InstrumentTooltip instrument={instrument}/>)\n      default:\n        break;\n    }\n  }\n}\n","import './track-display.css';\nimport React, { Component } from 'react';\nimport 'react-vertical-timeline-component/style.min.css';\nimport Avatar from 'react-avatar';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\nimport {MusicianTooltip, InstrumentTooltip} from './tooltip';\n/**\n * @author Pavlo Rozbytskyi\n * component for representation of all musicians played on current traсk\n * and which instrument played this musician on this track\n */\nexport default class TrackDisplay extends Component {\n  constructor (props){\n    super(props);\n\n    this.musicians = [];\n    this.instruments = [];\n  }\n  render() {\n    const { name, album, className, data, hideTrackDisplay, instruments,\n    musicians, style, show } = this.props;\n    \n    if(!show) return null;\n\n    return(\n      <div className={className} style={style}>\n        <div className=\"w-100 row justify-content-end pt-3 br-5\">\n          <FontAwesomeIcon icon={faTimes} onClick={hideTrackDisplay}/>\n        </div>\n      \n        <div className=\"w-100 row px-5 overflow-auto\">\n          <div className=\"w-100 row\">\n            <div className=\"col\">\n              <h2>{name}</h2>\n              <h5 className=\"text-secondary\">On \"{album.id}\" album</h5>\n            </div>\n            <div className=\"row w-100\">\n              <p className=\"text-secondary pl-5\">\n                {musicians} musicians\n              </p>\n              <p className=\"text-secondary ml-auto\">\n                {instruments} instruments\n              </p>\n            </div>\n          </div>\n\n          <div className=\"col pl-5\">\n            {data}\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  /**\n   * getting tooltip of musician or instrument\n   * @param {Object} node - musician or instrument object\n   * @param {String} type - type of node: musician or instrument\n   */\n  getTooltip = (node, type) => {\n    switch(type){\n      case \"musician\":\n        // displaing tooltip for the musician\n        return <MusicianTooltip musician={node}/>;\n      case \"instrument\":\n        return <InstrumentTooltip instrument={node}/>;\n      default: \n        return null;\n    }\n  }\n}\n","import {instrumentService, musicianService, albumService, trackService} from '../service';\nimport {uuid} from '../scripts/helpers';\nimport React from 'react';\nimport Avatar from 'react-avatar';\nimport {MusicianTooltip, InstrumentTooltip} from '../components/visualizing/tooltip';\nimport {\n  Tooltip,\n} from 'react-tippy';\nimport { renderToString } from 'react-dom/server';\n/**\n * @author Pavlo Rozbytskyi\n * @version 1.0.0\n *\n * Presentation layer: converting data from services to objects can be directly\n * displayed by cytoscape instance.\n */\n\n/**\n * convert album to cytoscape element\n * @param {Object} album album object to convert\n */\nexport const getCytoAlbum = (album) =>{\n  return {\n    data: {\n      type: \"album\",\n      label: album.id,\n      icon: album.icon,\n      id: uuid()\n    }\n  }\n}\n\n/**\n * convert musician to cytoscape element\n * @param {Object} musician musician object to convert\n */\nexport const getCytoMusician = (musician) =>{\n  return {\n    data: {\n      type: \"musician\",\n      label: musician.id,\n      icon: musician.icon,\n      id: uuid()\n    }\n  };\n}\n/**\n * convert instrument to cytoscape element\n * @param {Object} instrument instrument object to convert\n */\nexport const getCytoInstrument = (instrument) =>{\n  return {\n    data: {\n      type: \"instrument\",\n      label: instrument.id,\n      icon: instrument.url,\n      id: uuid()\n    }\n  };\n}\n/**\n * convert track to cytoscape element\n * @param {Object} track track object to convert\n */\nexport const getCytoTrack = (track) =>{\n  return {\n    data: {\n      type: \"track\",\n      label: track.id,\n      id: uuid()\n    }\n  };\n}\n/**\n * ctreating edge between two nodes\n * @param {Object} source source node\n * @param {Object} destination destination node\n */\nexport const getEdge = (source, destination) => {\n  return {\n    data: {\n      source: source.data.id,\n      type: destination.data.type,\n      target: destination.data.id\n    }\n  }\n}\n/**\n * preparing data for the album perspective\n *\n * connecting musicians and tracks with album\n * @param {Object} album album to display on graph\n */\nexport const getAlbumPerspective = (albumName) => {\n  let album = albumService.getByName(albumName);\n  let musicians = albumService.getMusiciansOfAlbum(album);\n  let tracks = trackService.getAllTracksOfAlbum(album.id);\n\n  try{\n    // converting albums, tracks and musicians to format: {data: {id: \\d, label: .+, icon}}\n    let convAlbum = getCytoAlbum(album);\n    let convTracks = tracks.flatMap(track => {\n      let convTrack = getCytoTrack(track);\n      let edge = getEdge(convAlbum, convTrack);\n      // returning track node and edge from this node to album node\n      return [convTrack, edge];\n    });\n    let convMus = musicians.flatMap(musician => {\n      let convMusician = getCytoMusician(musician);\n      let edge = getEdge(convAlbum, convMusician);\n      // returning musician node and edge from this node to album node\n      return [convMusician, edge];\n    });\n    // returning array containing all elements of album\n    return [convAlbum, ...convTracks, ...convMus];\n  }catch(err){\n    console.error('error occured in getting album perspective')\n    return getCytoAlbum(album);\n  }\n}\n\n/**\n * getting content of tracks perspective\n */\nexport const getTrackPerspective = (trackName, albumName, handler) => {\n  const data = trackService.getMusicianInstrumentRel(trackName, albumName);\n  const content = data.map((relation, index) => {\n    // getting musician's name\n    let musicianName   = Object.keys(relation)[0];\n    // getting instrument's name\n    let instrumentName = relation[musicianName];\n    // getting musician and instrument by name\n    let musician   = musicianService.getByName(musicianName);\n    let instrument = instrumentService.getByName(instrumentName);\n    // creating avatar of musician\n    let musicianAvatar = (\n      <Tooltip \n        unmountHTMLWhenHide={true}\n        position=\"right\" hideDelay={0} animation=\"none\"\n        duration={50} hideOnClick={false}\n        trigger=\"mouseenter\" html={<MusicianTooltip musician={musician}/>}>\n        <Avatar\n          onClick={() => handler(musicianName)}\n          className=\"box-shadow my-auto\"\n          round={true} src={musician.icon} size={100} name={musician.id}/>\n      </Tooltip>);\n    // creating avatar of the instrument\n    let instrumentAvatar = (\n      <Tooltip position=\"right\" hideDelay={0} \n        animation=\"none\"\n        sticky={false} duration={50} hideOnClick={false}\n        trigger=\"mouseenter\" html={<InstrumentTooltip instrument={instrument}/>}\n        >\n        <Avatar className=\"box-avatar my-auto\"\n          round={true} src={instrument.url} size={70} name={instrument.id}/>\n      </Tooltip>);\n\n    return (\n      <div className=\"row my-3\" key={index}>\n        <div className=\"row w-75\">\n          {musicianAvatar}\n          <h6 className=\"my-auto ml-4\">{musician.id}</h6>\n        </div>\n        <div className=\"row w-25 justify-content-end\">\n          {instrumentAvatar}\n        </div>\n      </div>\n    )\n  });\n  return content;\n}\n\n/**\n * converting instruments and musicians to data format readable by\n * cytoscape\n * @param {string} instrumentName name of instrument to be displayed\n */\nexport const getInstrumentPerspective = (name) => {\n  let instrument = instrumentService.getByName(name);\n\n  try{\n    let musicians  = instrumentService.getMusiciansOfInstrument(name);\n    // converting albums, tracks and musicians to format: {data: {id: \\d, label: .+, icon}}\n    let convInstr = getCytoInstrument(instrument);\n    let convMusic = musicians.flatMap(mus => {\n      let node = getCytoMusician(mus);\n      let edge = getEdge(convInstr, node);\n      // returning track node and edge from this node to album node\n      return [node, edge];\n    });\n    // returning array containing all elements of album\n    return [convInstr, ...convMusic];\n  }catch(err){\n    console.error('error occured by creation instruments perspective');\n    return getCytoInstrument(instrument);\n  }\n}\n/**\n * preparing data for the perspective where is displayed\n * on which albums some musicians have played together.\n *\n * @param {Array} nodes selected nodes\n */\nexport const getCompoundForAlbums = (nodes) => {\n  // getting collection with selected albums\n  let albums = nodes\n    .filter(album => album.data().type === \"album\")\n    .map(album => { return {data: album.data()}} );\n\n  console.log(albums);\n  try{\n    // following lines find common albums of musicians\n    let commonMusicians = albums\n      .reduce((accumulator, album, index, array) => {\n        // getting all albums names of the given musician\n        let musicians = albumService.getByName(album.data.label).musicians;\n        // return all albums on the first iteration\n        if(index === 0){\n          return musicians;\n        }\n        // getting compound elements of previous musician and current\n        return accumulator.filter(elem => musicians.includes(elem));\n      }, [])\n      // converting albums to cytoscape albums\n      .map(musicianName => {\n        let musician = musicianService.getByName(musicianName);\n        return getCytoMusician(musician);\n      });\n    // creating edges from all musicians to all albums\n    let edges = commonMusicians.flatMap(musician => {\n      let albumMusicianEdges = albums.map(album => getEdge(album, musician));\n      return [...albumMusicianEdges];\n    });\n\n    return [...albums, ...commonMusicians, ...edges];\n  }catch(err){\n    console.error('error occured in creating common musicians for albums');\n  }\n  return albums;\n}\n/**\n * preparing data for the perspective where is displayed\n * on which albums some musicians have played together.\n *\n * @param {Array} nodes selected nodes\n */\nexport const getCompoundForMusicians = (nodes) => {\n  // getting collection with selected musicians\n  let musicians = nodes\n  .filter(mus => mus.data().type === \"musician\")\n  .map(mus => { return {data: mus.data()}} );\n  try{\n    // following lines find common albums of musicians\n    let commonAlbums = musicians\n      .reduce((accumulator, musician, index, array) => {\n        // getting all albums names of the given musician\n        let albums = musicianService.getAlbumsNamesOfMusician(musician.data.label);\n        // return all albums on the first iteration\n        if(index === 0){\n          return albums;\n        }\n        // getting compound elements of previous musician and current\n        let elems = accumulator.filter(elem => albums.includes(elem));\n        return elems;\n      }, [])\n      // converting albums to cytoscape albums\n      .map(albumName => {\n        let album = albumService.getByName(albumName);\n        return getCytoAlbum(album);\n      });\n    // creating edges from all musicians to all albums\n    let edges = commonAlbums.flatMap(album => {\n      let albumMusicianEdges = musicians.map(musician => getEdge(musician, album));\n      return [...albumMusicianEdges];\n    });\n\n    return [...musicians, ...commonAlbums, ...edges];\n\n  }catch(err){\n    console.error('error occured in creating compound albums for musicians');\n    return musicians;\n  }\n}\n\n\n/**\n * convertive data for musician perspective to data format readable by\n * cytoscape\n * @param {string} tracks tracks to display on graph\n */\nexport const getMusicianPerspective = (musicianName) => {\n  try{\n    var musician    = musicianService.getByName(musicianName);\n\n    // instruments and albums names\n    var instruments = musicianService.getInstrumentsNamesOfMusician(musicianName);\n    var albums      = musicianService.getAlbumsNamesOfMusician(musicianName);\n    // instruments and albums objects\n    var instObjects = instruments.map(instr => instrumentService.getByName(instr));\n    var albObjects  = albums.map(alb => albumService.getByName(alb));\n    // converting albums, tracks and musicians to format: {data: {id: \\d, label: .+, icon}}\n    var convMus   = getCytoMusician(musician);\n    var convInstr = instObjects.flatMap(instr => {\n        var node = getCytoInstrument(instr);\n        var edge = getEdge(convMus, node);\n        // returning instrument node and edge from this node to musician node\n        return [node, edge];\n    });\n    var convAlb = albObjects.flatMap(alb => {\n        var node = getCytoAlbum(alb);\n        var edge = getEdge(convMus, node);\n        // returning musician node and edge from this node to album node\n        return [node, edge];\n    });\n    // // returning array containing all elements of album\n    return [convMus, ...convInstr, ...convAlb];\n  }catch(err){\n    console.error(\"error occured in creation musicians perspective\");\n    if(!musician) return [];\n    return getCytoMusician(musician);\n  }\n}\n\n/**\n * making array of relations type {string} musician - {string} instrument\n * to {object} musician - {object} instrument\n * @param {Array} relations - musician - instrument relations\n */\nexport const getObjectsToMusicianInstrumentRelation = (relations) => {\n  try{\n    var converted = relations.map(rel => {\n      var newRel = {};\n      newRel[0] = musicianService.getByName(Object.entries(rel)[0][0]);\n      newRel[1] = instrumentService.getByName(Object.entries(rel)[0][1]);\n      return newRel;\n    });\n    return converted;\n  }catch(err){\n    console.error(relations);\n    return [];\n  }\n}\n","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport queryString from 'query-string';\nimport './album-route.css';\nimport { SearchBar, NavigationBar, Timeline, AlbumGraph, TrackDisplay } from '../../components';\nimport { albumService, musicianService, trackService, instrumentService } from '../../service';\n\nimport {\n    getAlbumPerspective,\n    getMusicianPerspective,\n    getInstrumentPerspective,\n    getCompoundForMusicians,\n    getCompoundForAlbums,\n    getTrackPerspective\n  } from '../../presentation/presenter';\n\n/**\n * @author Pavlo Rozbytskyi\n * in this component is main user interaction where\n * are showed different perspectives for the user.\n */\nclass AlbumRoute extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      collapseNavbar: false,\n      album: '',\n      trackName: '',\n      musicianName: '',\n      instrumentName: '',\n    // cytoscape graph instance stays the same\n    // for all perspectives (musician, album, track, instrument) and we have\n    // to let the graph instance know which perspective to display\n    // e.g to adjust styles and event handlers etc.\n    // That's why we need to keep the type of perspective in state of\n    // current component in perspective variable and past it into\n    // the graph instance.\n      perspective: '', // current perspective\n      moveTimeline: true,\n    };\n    this.specialCaseFunction = getCompoundForMusicians;\n    // store here previous perspectives to be able to navigate back\n    this.navigationStack     = [];\n  }\n\n  componentDidMount() {\n    // just be sure that just albums component will be showed\n    // this.props.showAlbums();\n    // getting values from the query string\n    const values = queryString.parse(this.props.location.search);\n    // there are two values of the query string: n stands for\n    // name of the album and m stands for musicians name\n\n    // if name of the album defined, show this album on the display\n    if(values.n){\n      // if values from query string exist, get album name\n      // this.props.showAlbums(values.n);\n      this.setCurrentAlbum(values.n);\n      // show musician if exists in the url\n      if(values.m){\n        this.showMusicianDisplay(values.m);\n      }\n    }else{\n      // if values from query string does not exist, get first album\n      // and set this album as current album\n      let album = albumService.getFirstAlbum();\n\n      if(!album){\n        this.props.history.push(`/`);\n      }else{\n        let name  = album.id;\n        this.setCurrentAlbum(name);\n      }\n    }\n  }\n\n  render() {\n    // don't show the component if not active\n    // if(!this.props.active)\n    //   return null;\n    // getting data from state\n    const {\n        album, perspective,\n        musicianName, instrumentName,\n        trackName, moveTimeline\n      } = this.state;\n    // gettingflex-column data for the timeline\n    const timelineData = albumService\n      .getAll()\n      .sort((a, b) => new Date(a.released) - new Date(b.released));\n    // style to toggle navigation bar\n    const collapseClass = this.state.collapseNavbar ? \"col-xl-2 col-lg-3 col-md-12\" : null;\n    const collapsedMain = this.state.collapseNavbar ? \"col-xl-10 col-lg-9 col-md-12\" : \"col-12\"\n    // data1 and data2 will be past into navigation bar\n    let data1 = [];\n    let data2 = [];\n    //type1 and type2 will be past into navigation bar\n    let type1 = \"\";\n    let type2 = \"\";\n\n    // this elements array will be rendered on the graph instance\n    let elements = [];\n    // variable to store different information\n    let info     = {};\n    // try to show some elements if the album exists\n    if(album){\n      // preparing data for corresponding perspectives\n      switch(perspective){\n        // data for musician's perspective\n        case 'musician':\n          elements = getMusicianPerspective(musicianName);\n          data1 = musicianService.getAlbumsNamesOfMusician(musicianName);\n          data2 = musicianService.getInstrumentsNamesOfMusician(musicianName);\n          type1 = \"album\";\n          type2 = \"instrument\";\n          break;\n        // data for instrument's perspective\n        case 'instrument':\n          elements = getInstrumentPerspective(instrumentName);\n          data1 = instrumentService\n            .getMusiciansOfInstrument(instrumentName)\n            .map(elem => elem.id);\n          data2 = [];\n          type1 = \"musician\";\n          type2 = \"\";\n          break;\n        // data for track's perspective\n        case 'track':\n          elements = getTrackPerspective(trackName, album.id, this.switchToMusician);\n          info     = trackService.getRelationsInfo(trackName, album.id);\n          break;\n        // data for special case perspective where are dependencies\n        // e.g. between two musicians\n        case 'special':\n          elements = this.specialCaseFunction(this.data);\n          break;\n        // data for albums perspective is showed by defaul\n        default:\n          data1 = album.musicians;\n          data2 = trackService.getAllTracksNamesOfAlbum(album.id)\n          type1 = \"musician\";\n          type2 = \"track\";\n          elements = getAlbumPerspective(album.id);\n\n          break;\n      }\n    }\n\n    return (\n      <div className=\"w-100 h-100 album-route\">\n        <SearchBar\n          style={{heigth: '10%'}}\n          back={(perspective === 'special' || perspective === 'track') ? true : false}\n          button={false}\n          name={album[0]}\n          onNavbarButtonPress={(perspective === 'special' || perspective === 'track') ?\n            this.navigateBack : this.collapseNavbar}\n          switchToSearch={this.switchToSearch}/>\n\n        <div className=\"w-100 h-100 mx-auto row\">\n          <NavigationBar\n              collapseClass={this.state.collapseNavbar}\n              className={collapseClass}\n              showMusicianDisplay={this.showMusicianDisplay}\n              showTrackDisplay={this.showTrackDisplay}\n              showAlbumsDisplay={this.switchToAlbum}\n              showInstrumentDisplay={this.showInstrumentDisplay}\n              data1={data1}\n              data2={data2}\n              type1={type1}\n              type2={type2}\n            />\n          <div className={collapsedMain}>          \n            <div style={{width: '100%', height: '25%'}} \n              className=\"row overflow-auto mx-auto hide-scrollbar\">\n              <Timeline\n                data={timelineData}\n                highlighted={album.id}\n                move={moveTimeline}\n                moveEnd={this.moveEnd}\n                switchToAlbum={this.switchToAlbum}\n                style={{marginTop: -20, height: 200, top: 20}}\n                />\n            </div>\n\n            <div style={{height: '70%', width: '95%'}} className=\"mx-auto box-shadow box-radius\">\n              <AlbumGraph\n                show={perspective !== 'track'}\n                className=\"overflow-auto no-scrollbar w-100 h-100\"\n                type={perspective}\n                handlePressOnAlbum={this.handlePressOnAlbum}\n                handlePressOnMusician={this.handlePressOnMusician}\n                handlePressOnTrack={this.handlePressOnTrack}\n                handlePressOnInstrument={this.handlePressOnInstrument}\n                handleCollection={this.handleCollection}\n                data={elements}/>\n\n              <TrackDisplay\n                show={perspective === 'track'}\n                style={{minWidth: '600px', maxHeight: '60%'}}\n                className=\"mx-auto w-50 h-75 box-shadow box-radius overflow-auto\"\n                album={album}\n                name={trackName}\n                data={elements}\n                musicians={info.musicians}\n                instruments={info.instruments}\n                switchToMusician={this.switchToMusician}\n                hideTrackDisplay={this.hideTrackDisplay}/>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n    return (\n      // toot div\n      <div className=\"col w-100 h-80 container-width\">\n        {/* searchbar container */}\n        <div className=\"row\">\n        <SearchBar\n          back={(perspective === 'special' || perspective === 'track') ? true : false}\n          button={false}\n          name={album[0]}\n          onNavbarButtonPress={(perspective === 'special' || perspective === 'track') ?\n            this.navigateBack : this.collapseNavbar}\n          switchToSearch={this.switchToSearch}/>\n        </div>\n\n        <div className=\"mh-100 h-100 row\">\n          {\n            collapseClass ? (<NavigationBar\n              className={collapseClass}\n              showMusicianDisplay={this.showMusicianDisplay}\n              showTrackDisplay={this.showTrackDisplay}\n              showAlbumsDisplay={this.switchToAlbum}\n              showInstrumentDisplay={this.showInstrumentDisplay}\n              data1={data1}\n              data2={data2}\n              type1={type1}\n              type2={type2}\n            />) : null\n          } \n\n          <div className=\"hide-scrollbar overflow-auto col\">\n            <Timeline\n              data={timelineData}\n              highlighted={album.id}\n              move={moveTimeline}\n              moveEnd={this.moveEnd}\n              switchToAlbum={this.switchToAlbum}\n              style={{marginTop: -20, height: 200, top: 20}}\n              />\n            \n            <div className=\"w-100 h-100 bg-primary\">\n            {perspective !== 'track' ?\n              <AlbumGraph\n                style={{\n                  height: '100%',}}\n                className=\"mx-auto mb-5 box-shadow box-radius overflow-auto no-scrollbar\"\n                type={perspective}\n                handlePressOnAlbum={this.handlePressOnAlbum}\n                handlePressOnMusician={this.handlePressOnMusician}\n                handlePressOnTrack={this.handlePressOnTrack}\n                handlePressOnInstrument={this.handlePressOnInstrument}\n                handleCollection={this.handleCollection}\n                data={elements}/> :\n              <TrackDisplay\n                style={{minWidth: '600px', maxHeight: '60%'}}\n                className=\"mx-auto w-50 h-75 box-shadow box-radius overflow-auto\"\n                album={album}\n                name={trackName}\n                data={elements}\n                musicians={info.musicians}\n                instruments={info.instruments}\n                switchToMusician={this.switchToMusician}\n                hideTrackDisplay={this.hideTrackDisplay}/>\n            }\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n  /**\n   * switching to musician\n   * @param {String} musicianName - name of the musician\n   */\n  switchToMusician = (musicianName) => {\n    let albumName = albumService\n      .getAlbumWithMusician(musicianName).id;\n\n    this.backToMusisian(musicianName, albumName)\n  }\n  /**\n   * callback to stop timeline moving\n   */\n  moveEnd = () => {\n    this.setState({moveTimeline: false});\n  }\n  /**\n   * setting all tracks of current album to component state\n   * @param album - current album\n   */\n  getTracksOfAlbum = (album) => {\n    return trackService.getAllTracksOfAlbum(album.id);\n  }\n  /**\n   * switching from current album to next album\n   * choosen by user\n   * @param {string} albumName  - name of the next album chosen by user\n   */\n  switchToAlbum = (albumName) => {\n    this.props.history.push(`/album?n=${albumName}`);\n    this.setCurrentAlbum(albumName);\n  }\n\n  /**\n   * switching from album screen to next search screen\n   * @param {string} query - query\n   */\n  switchToSearch = (query) => {\n    this.props.history.push(`/search?q=${query}`);\n  }\n  /**\n   * setting album by name to current webpage state\n   * @param {string} albumName - name of the album\n   */\n  setCurrentAlbum = (albumName) => {\n    var album = albumService.getByName(albumName);\n    album = album ? album : albumService.getFirstAlbum();\n    \n    this.specialCaseFunction = getCompoundForMusicians;\n\n    this.setState({\n      album: album,\n      trackName: '',\n      musicianName: '',\n      instrumentName: '',\n      perspective: 'album',\n      moveTimeline: true,\n    });\n  }\n  /**\n   * pushing perspective and name to data to navigation stack\n   * @param {String} perspective - perspective\n   * @param {String} name - name of element to show\n   */\n  pushToNavigationStack = (perspective, name) => {\n    this.navigationStack.push({perspective, name});\n  }\n  /**\n  * save current perspective\n  */\n  saveContext = () => {\n    const {perspective, album, musicianName, instrumentName} = this.state;\n\n    this.pushToNavigationStack('album', album.id);\n\n    if(perspective === 'musician'){\n      this.pushToNavigationStack('musician', musicianName);\n    }else if(perspective === 'instrument'){\n      this.pushToNavigationStack('musician', musicianName);\n      this.pushToNavigationStack('instrument', instrumentName);\n    }\n  }\n  /**\n   * navigate back from special perspective\n   */\n  navigateBack = () => {\n    // todo: testing reasons\n    if(this.navigationStack.length > 0){\n      let lastState = this.navigationStack.pop();\n      // if the last state album, navigate to this album\n      if(lastState.perspective === 'album'){\n        this.setCurrentAlbum(lastState.name);\n      }else if(lastState.perspective === 'musician'){\n        let albumState = this.navigationStack.pop();\n        this.backToMusisian(lastState.name, albumState.name);\n      }else{\n        this.hideTrackDisplay();\n      }\n    }else{\n      this.hideTrackDisplay();\n    }\n  }\n  /**\n   * hide navbar\n   */\n  collapseNavbar = () => {\n    this.setState({collapseNavbar: !this.state.collapseNavbar});\n  }\n\n  /**\n   * show track description\n   * @param {string} trackName - track which description to show\n   */\n  showTrackDisplay = (trackName) => {\n    this.setState({\n      trackName: trackName,\n      perspective: 'track',\n      collapseNavbar: false,\n    });\n  }\n  /**\n   * show instrument display\n   * @param {string} trackName - track which description to show\n   */\n  showInstrumentDisplay = (name) => {\n    this.setState({\n      instrumentName: name,\n      perspective: 'instrument'\n    });\n  }\n\n  /**\n   * hide instrument display\n   */\n  hideInstrumentDisplay = () => {\n    this.setState({\n      instrumentName: '',\n      perspective: 'musician'\n    });\n  }\n\n  /**\n   * hide track display\n   */\n  hideTrackDisplay = () => {\n    this.setState({\n      trackName: '',\n      perspective: 'album'\n    });\n  }\n  /**\n   * handle collection of selected nodes different for each\n   * perspective.\n   *\n   * there are special cases for musicians, albums and instruments perspective.\n   * e.g.: if the user selects musicians on the album's perspective\n   * the special function should return data with albums where this musicians\n   * have played together.\n   * @param {Array} elements - array with selected cytoscape nodes\n   */\n  handleCollection = (elements) => {\n    var {perspective} = this.state;\n\n    switch(perspective){\n      // handling selected musicians of the albums perspective\n      case 'album':\n        this.specialCaseFunction = getCompoundForMusicians;\n        break;\n      case 'musician':\n        // function shows\n        this.specialCaseFunction = getCompoundForAlbums;\n        break;\n      default:\n        return;\n    }\n    // storing returned collection in class variable to\n    // process it by rerender later\n    this.data = elements;\n    // saving current context\n    this.saveContext();\n    this.setState({perspective: 'special', collapseNavbar: false});\n  }\n  /**\n   * calling this function when need back from special perspective\n   * to musicians perspective\n   * @param {String} musicianName - name of the musician\n   * @param {String} albumName - name of the album\n   */\n  backToMusisian = (musicianName, albumName) => {\n    this.specialCaseFunction = getCompoundForAlbums;\n\n    this.setState({\n      musicianName: musicianName,\n      albumName: albumName,\n      instrumentName: '',\n      perspective: 'musician',\n    });\n  }\n  /**\n   * showing musician perspective\n   * @param {string} musicianName - album name\n   */\n  showMusicianDisplay = (musicianName) => {\n    this.specialCaseFunction = getCompoundForAlbums;\n    this.setState({\n      musicianName: musicianName,\n      instrumentName: '',\n      perspective: 'musician',\n    });\n  }\n  /**\n   * hiding musicians display\n   */\n  hideMusicianDisplay = () => {\n    this.specialCaseFunction = getCompoundForMusicians;\n    this.setState({\n      musicianName: '',\n      trackName: '',\n      perspective: 'album',\n    });\n  }\n\n  /**\n  * handle pressing on album nodes\n  * @param {Object} node - album node\n  */\n  handlePressOnAlbum = (node) => {\n    let data = node.data();\n\n    switch(this.state.perspective){\n      // press on album in the musicians perspective\n      // leads user to album's perspective\n      case \"musician\":\n        this.switchToAlbum(data.label);\n        break;\n      case \"special\":\n        this.switchToAlbum(data.label);\n        break;\n      default:\n        break;\n    }\n  }\n\n  /**\n  * handle pressing on musician nodes\n  * @param {Object} node - musician node\n  */\n  handlePressOnMusician = (node) => {\n    let data = node.data();\n\n    switch(this.state.perspective){\n      case \"instrument\":\n        this.showMusicianDisplay(data.label);\n        break;\n      case \"album\":\n        this.showMusicianDisplay(data.label);\n        break;\n      case \"musician\":\n        this.hideMusicianDisplay();\n        break;\n      case \"special\":\n        this.showMusicianDisplay(data.label);\n        break;\n      default:\n        break;\n    }\n  }\n\n  /**\n  * handle pressing on track nodes\n  * @param {Object} node - track node\n  */\n  handlePressOnTrack = (node) => {\n    let data = node.data();\n\n    switch(this.state.perspective){\n      case \"album\":\n        this.showTrackDisplay(data.label);\n        break;\n      default:\n        break;\n    }\n  }\n\n  /**\n  * handle pressing on instrument nodes\n  * @param {Object} node - instrument node\n  */\n  handlePressOnInstrument = (node) => {\n    let data = node.data();\n\n    switch(this.state.perspective){\n      case \"instrument\":\n        this.hideInstrumentDisplay();\n        break;\n      case \"musician\":\n        this.showInstrumentDisplay(data.label);\n        break;\n      default:\n        break;\n    }\n  }\n}\n\nexport default withRouter(AlbumRoute);\n","import {\n  fetchFilesBegin,\n  fetchFilesSuccess,\n  fetchFilesFailture\n} from '../actions/fileActions';\nimport store from '../store';\n\nasync function fetchFiles(path) {\n  store.dispatch(fetchFilesBegin());\n  \n  let albums      = await fetch(`discogs/${path}/albums.json`)\n  let tracks      = await fetch(`discogs/${path}/tracks.json`)\n  let musicians   = await fetch(`discogs/${path}/musicians.json`)\n  let instruments = await fetch(`discogs/${path}/instruments.json`)\n\n\n  if(albums.error || tracks.error ||\n    musicians.error || instruments.error){\n    let error = null;\n    if(albums.error){\n      error = albums.error;\n    }else if(tracks.error){\n      error = tracks.error;\n    }else if(musicians.error){\n      error = musicians.error;\n    }else{\n      error = instruments.error;\n    }\n    store.dispatch(fetchFilesFailture(error));\n    return;\n  }\n\n  let albumsJSON = await albums.json();\n  let tracksJSON = await tracks.json();\n  let musiciansJSON = await musicians.json();\n  let instrumentsJSON = await instruments.json();\n\n  store.dispatch(fetchFilesSuccess({\n    albums: albumsJSON,\n    musicians: musiciansJSON,\n    tracks: tracksJSON,\n    instruments: instrumentsJSON\n  }));\n}\n\nexport default fetchFiles;","import React, { Component } from 'react';\nimport './home-route.css';\nimport { withRouter } from 'react-router-dom';\nimport fetchFiles from '../../network/fetchFiles';\nimport store from '../../store';\nimport config from '../../assets/config.json';\n\n/**\n * @author Pavlo Rozbytskyi\n * Home component is just html website representing \n * whole project \n */\nclass HomeRoute extends Component {\n\tconstructor(props){\n\t\tsuper(props);\n\n\t\tstore.subscribe(() => {\n\t\t\tlet loading = store.getState().fileState.loading;\n\t\t\tlet files = store.getState().fileState.files;\n\n\t\t\tif(!loading && files.albums !== 0){\n\t\t\t\tthis.props.history.push(`/album`)\n\t\t\t}\n    });\n\t}\n\n\trender() {\n    return (\n\t\t\t<div>\n\t\t\t\t{this.getNavigationBar()}\n\t\t\t\t{this.getJumbotron()}\n\t\t\t\t{this.getContent()}\n\t\t\t\t{/* <!-- root application container --> */}\n\t\t\t\t{this.getApplicationContainer()}\n\t\t\t\t{this.getCredits()}\n\t\t\t\t{this.getFooter()}\n\t\t\t</div>\n    );\n\t}\n\t// container with image of the application and green button \n\t// to step into the application \n\tgetApplicationContainer = () => {\n\t\treturn <div className=\"container\">\n\t\t\t<a alt=\"screenshots section\" name=\"screenshots\"/>\n\t\t\t\t<h3 className=\"mb-3\">{config.homepage_config.screenshots_title}</h3>\t\t\n\n\t\t\t\t<div className=\"row my-5\">\n\t\t\t\t\t<div className=\"col-lg-7\">\n\t\t\t\t\t\t<img src={require('../../assets/musician-screen.png')} alt=\"musician screen of the application\"/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"col-lg-5\">\n\t\t\t\t\t\t<h4>{config.homepage_config.screenshots_musician}</h4>\n\t\t\t\t\t\t<p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Illum, fugiat illoe, tenetur nesciunt beatae sunt fuga iure, at dolorum, sed dolore vitae laborum doloremque consequatur. Suscipit ex, quis magni fugit id nobis excepturi tempora sunt omnis eaque corporis numquam velit dicta aperiam at.</p>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t<div className=\"row my-5\">\n\t\t\t\t\t<div className=\"col-lg-4\">\n\t\t\t\t\t\t<h4>{config.homepage_config.screenshots_special}</h4>\n\t\t\t\t\t\t<p>Lorem ipsum dolor si Illum, fugiat illo. Vel recusandae odio ipsam aspernatur totam cumque, tenetur nesciunt beatae sunt fuga iure, at dolorum, sed dolore vitae laborum doloremque consequatur. Suscipit ex, quis magni fugit id nobis excepturi tempora sunt omnis eaque corporis numquam velit dicta aperiam at.</p>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"col-lg-8\">\n\t\t\t\t\t\t<img src={require('../../assets/special-end-screen.png')} alt=\"spezialansicht screen of the application\"/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"row my-5\">\n\t\t\t\t\t<div className=\"col-lg-8\">\n\t\t\t\t\t\t<img src={require('../../assets/search-end-screen.png')} alt=\"search screen of the application\"/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"col-lg-4\">\n\t\t\t\t\t\t<h4>{config.homepage_config.screenshots_search}</h4>\n\t\t\t\t\t\t<p>Lorem ipsum dolor si Illum, fugiat illo. Vel recusandae odio ipsam aspernatur totam cumque, tenetur nesciunt beatae sunt fuga iure, at dolorum, sed dolore vitae laborum doloremque consequatur. Suscipit ex, quis magni fugit id nobis excepturi tempora sunt omnis eaque corporis numquam velit dicta aperiam at.</p>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t}\n\t// jumbotron\n\tgetJumbotron = () => {\n\t\treturn <div className=\"jumbotron\">\n\t\t\t<div className=\"container\"> \n\t\t\t\t<h1 className=\"display-4\">{config.homepage_config.jumbo_title}</h1>\n\t\t\t\t<p className=\"lead w-90\">{config.homepage_config.jumbo_subtitle}</p>\n\n\t\t\t\t<p className=\"lead jumbo-button\">\n\t\t\t\t\t<button className=\"btn btn-primary btn-lg\" onClick={() => this.handlePress('miles-dataset')}>\n\t\t\t\t\t\t{config.homepage_config.jubmo_button} &raquo;\n\t\t\t\t\t</button>\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t</div>\n\t}\n\t// navbar of the website\n\tgetNavigationBar = () => {\n\t\treturn <nav className=\"navbar navbar-expand-lg navbar-light\">\n      <a className=\"navbar-brand\" href=\"/\">\n\t\t\t\t<img src=\"./assets/alto-saxophone.gif\" alt=\"alto saxophone\" width=\"40\"/>\n\t\t\t</a>\n      <button className=\"navbar-toggler\" type=\"button\" \n\t\t\t\tdata-toggle=\"collapse\" data-target=\"#navbarNav\" \n\t\t\t\taria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n        <span className=\"navbar-toggler-icon\"></span>\n      </button>\n      <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n        <ul className=\"navbar-nav\">\n          <li className=\"nav-item active\" data-toggle=\"collapse\" data-target=\".navbar-collapse.show\">\n            <a className=\"nav-link\" href=\"/\">Home <span className=\"sr-only\">(current)</span></a>\n          </li>\n          <li className=\"nav-item\"  data-toggle=\"collapse\" >\n              <a className=\"nav-link\" href=\"#about\" data-target=\".navbar-collapse.show\">About</a>\n          </li>\n          <li className=\"nav-item\" data-toggle=\"collapse\">\n            <a className=\"nav-link\" href=\"#discographies_section\" data-target=\".navbar-collapse.show\">Discographies</a>\n          </li>\n          <li className=\"nav-item\" data-toggle=\"collapse\">\n            <a className=\"nav-link\" href=\"#screenshots\" data-target=\".navbar-collapse.show\">Screenshots</a>\n          </li>\n          <li className=\"nav-item\">\n              <a className=\"nav-link\" href=\"#contact\">Contact</a>\n          </li>\n        </ul>\n      </div>\n    </nav>\n\t}\n\t// content of the project description\n\tgetContent = () => {\n\t\treturn <div>\n\t\t\t<a alt=\"about section\" name=\"about\"/>\n\n\t\t\t<div className=\"container\">\n\t\t\t\t<div className=\"row padding\">\n\t\t\t\t\t<div className=\"col-lg-8\">\n\t\t\t\t\t\t<h2>{config.homepage_config.project_title}</h2>\n\t\t\t\t\t\t<p >{config.homepage_config.project_description}</p>\n\n\t\t\t\t\t\t<h3>{config.homepage_config.goal_title}</h3>\n\t\t\t\t\t\t<p>{config.homepage_config.project_goal}</p>\n\t\t\t\t\t\t<p>Jeder ist herzlich eingeladen bei diesem Projekt mitzumachen. Den \n\t\t\t\t\t\t\tCode finden Sie auf GitHub unter\n\t\t\t\t\t\t\t<a href=\"https://github.com/prozb/miles-davis-project\" alt=\"this project on github\"> prozb/miles-davis-project</a>.\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"col-lg-4\">\n\t\t\t\t\t\t\t<img alt=\"graph representation\" src=\"assets/davis.png\" className=\"img-fluid\"/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n    \t</div>\n\n\t\t\t<hr className=\"col-xs-12\"></hr>\n\n\t\t\t<a alt=\"discographies section\" name=\"discographies_section\"></a>\n\t\t\t<div className=\"card-holder container\">\n\t\t\t\t<h3>{config.homepage_config.discographies_title}</h3>\n\t\t\t\t<p>{config.homepage_config.discographies_description}</p>\n\n\t\t\t\t<p>Außerdem wird neben diesem Projekt zur Visualisierung der \n\t\t\t\t\tDiskografien an einem <a href=\"https://github.com/prozb/discography-scraper\">prozb/discography-scraper</a> zur\n\t\t\t\t\tautomatisierten Erstellung \n\t\t\t\t\tder Diskografien gearbeitet. Die Idee ist die Daten für diese \n\t\t\t\t\tApplikation automatisch aus Wikipedia zu extrahieren, diese \n\t\t\t\t\tkönnen danach sofort in dieser Applikation visualisieren. Nach der \n\t\t\t\t\tEntwicklung dieses Programmes lassen sich Diskografien von \n\t\t\t\t\tanderen Bands in wenigen Minuten erstellen.\n\t\t\t\t</p>\n        <div className=\"row\">\n\t\t\t\t\t{this.getAllBands()}\n\t\t\t\t</div>\t\n    \t</div>\n\t\t\t<hr className=\"col-xs-12\"></hr>\n\t\t</div>\n\t}\n\n\t/**\n\t * getting card of the band\n\t */\n\tgetBandCard = (band) => {\n\t\treturn (\n\t\t\t<div key={band.name} className=\"col-md-4 custom-card d-flex align-items-stretch\">\n\t\t\t\t<div className=\"card text-center\">\n\t\t\t\t\t<img src={band.src} className=\"card-img-top\" alt={band.alt}></img>\n\t\t\t\t\t<div className=\"card-body\">\n\t\t\t\t\t\t<h5 className=\"card-title\">{band.name}</h5>\n\t\t\t\t\t\t<p className=\"card-text\">{band.info}</p>\n\t\t\t\t\t\t<button onClick={() => this.handlePress(band.discography)} href={band.url} className=\"btn btn-outline-primary\">{config.homepage_config.erkunden} &raquo;</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n\t/**\n\t * getting all bands cards \n\t */\n\tgetAllBands = () => {\n\t\treturn config.homepage_discografies.map(band => this.getBandCard(band));\n\t}\n\n\thandlePress = path => {\n\t\tfetchFiles(path);\n\t}\n\t// credits of the webpage\n\tgetCredits = () => {\n\t\treturn <div>\n\t\t\t<div className=\"container credits\">\n\t\t\t</div>\n\t\t\t<hr className=\"col-xs-12\"></hr>\n\t\t</div>\n\t}\n\t// footer of the webpage\n\tgetFooter = () => {\n\t\treturn ( \n\t\t<footer className=\"page-footer font-small my-footer\">\n\t\t\t<div className=\"container text-center\">\n\t\t\t\t<p>Jumbotron foto is made by Alex Paganelli on Unsplash</p>\n\t\t\t</div>\n\n\t\t\t<a name=\"contact\"> </a>\n\n      <div className=\"container text-center\">\n      <p >If you have any questions or want to cooperate\n\t\t\t\tjust write me short email: \n\t\t\t\t<a href=\"mailto:pavlo@rozbitski.de\"> Pavlo Rozbytskyi, pavlo@rozbitski.de</a>\n\t\t\t</p>\n      </div>\n\t\t\t<hr className=\"col-xs-12\"></hr>\n      <div className=\"footer-copyright text-center pb-3\">© {new Date().getFullYear()} Copyright: Pavlo Rozbytskyi\n      </div>\n    </footer>\n\t\t)\n\t}\n}\n\nexport default withRouter(HomeRoute);","import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Badge from 'react-bootstrap/Badge';\nimport './menu.css';\n\nconst StyledMenuItem = withStyles(theme => ({\n  root: {\n    '&:focus': {\n      backgroundColor: theme.palette.primary.main,\n      margin: '1px',\n      'border-top-left-radius': '5px',\n      'border-top-right-radius': '5px',\n      'border-bottom-left-radius': '5px',\n      'border-bottom-right-radius': '5px',\n      '& .MuiListItemIcon-root, & .MuiListItemText-primary': {\n        color: theme.palette.common.white,\n        'font-weight': 'bold',\n      },\n    },\n  },\n}))(MenuItem);\n\n\nexport default function CustomizedMenus(props) {\n  function getMenuListItems (data) {\n    var menuItems = [];\n\n    data.forEach((item, index) => {\n      var classes = \"\"\n      if(index === 0){\n        classes = \"first-menu-item menu-item\";\n      }else if(index === data.length - 1){\n        classes = \"last-menu-item menu-item\";\n      }else{\n        classes = \"menu-item\";\n      }\n\n      menuItems.push(\n        <div key={index} className={classes} onClick={() => props.changeMenuItem(item.name)}>\n          <StyledMenuItem>\n            <ListItemText primary={item.name} />\n              <Badge pill variant={item.count === 0 ? \"light\" : \"info\"}>{item.count}</Badge>\n          </StyledMenuItem>\n        </div>\n      )\n    });\n\n    return menuItems;\n  }\n\n  return (\n    <div className=\"menu-container\">\n      {getMenuListItems(props.data)}\n    </div>\n  );\n}","import '../album-route/album-route.css';\n\nimport React, { Component } from 'react';\nimport Graph from '../../components/visualizing/graph';\nimport CustomizedMenus from './menu/menu';\nimport queryString from 'query-string';\nimport { withRouter } from 'react-router-dom';\nimport { SearchBar } from '../../components';\nimport {\n  getCytoAlbum, getCytoMusician, getCytoTrack, getCytoInstrument\n} from '../../presentation/presenter';\n\nimport {\n  instrumentService, albumService, musicianService, trackService\n } from '../../service';\n/**\n * @author Pavlo Rozbytskyi\n * Search component to handle searching data in the\n * discographie.\n */\nclass SearchRoute extends Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      type: '', // type allows user to filter results\n    }\n  }\n\n  componentDidMount () {\n    // be sure that all another screens are disabled when\n    // search screen must be showed\n    // this.props.showSearchScreen();\n  }\n\n  render() {\n    // don't show this component if not active\n    // if(!this.props.active)\n    //   return null;\n\n    //parsing browser search-bar query\n    const values = queryString.parse(this.props.location.search);\n    // check q parameter is defined in search-bar\n    const query = values.q ? values.q : '';\n    // finding all data user is searching for\n    var instruments = instrumentService.getContaining(query);\n    var albums = albumService.getContaining(query);\n    var tracks = trackService.getContaining(query);\n    var musicians = musicianService.getContaining(query);\n    // counting results to print it out for the user\n    var count = instruments.length + albums.length + musicians.length + tracks.length;\n    // data array where are all finded elements stored\n    var data = [];\n    // user has ability to filter data by type\n    // and then data of some type will be shown on the screen\n    switch(this.state.type){\n      // display data only certain type\n      case \"Albums\":\n        // converting array with albums to array with cytoscape albums\n        data = [...albums.map(elem => getCytoAlbum(elem))];\n        break;\n      case \"Instruments\":\n        data = [...instruments.map(elem => getCytoInstrument(elem))];\n        break;\n      case \"Musicians\":\n        data = [...musicians.map(elem => getCytoMusician(elem))];\n        break;\n      case \"Tracks\":\n        data = [...tracks.map(elem => getCytoTrack(elem))];\n        break;\n      // by default show all results\n      default:\n        data = [\n          ...albums.map(elem => getCytoAlbum(elem)),\n          ...musicians.map(elem => getCytoMusician(elem)),\n          ...tracks.map(elem => getCytoTrack(elem)),\n          ...instruments.map(elem => getCytoInstrument(elem))\n        ];\n        break;\n    }\n\n    return (\n      <div className=\"fill\">\n        <SearchBar\n          back={true}\n          name={\"Search results\"}\n          onNavbarButtonPress={() => {\n            this.props.history.goBack();\n          }}\n          switchToSearch={this.processSearch}/>\n\n        <div className=\"container d-flex flex-col fill\">\n          {/* Menu container */}\n          <div>\n            <CustomizedMenus\n              changeMenuItem={this.chooseFilterType}\n              data={[\n                {name: 'Albums', count: albums.length},\n                {name: 'Musicians', count: musicians.length},\n                {name: 'Instruments', count: instruments.length},\n                {name: 'Tracks', count: tracks.length}\n              ]}/>\n          </div>\n          {/* container with results */}\n          <div className=\"full-width results-container\">\n            <h3 className=\"display-7\">Showing  {count} available result{count !== 1 ? 's' : ''}</h3>\n            <hr/>\n            <div className=\"box-shadow box-radius h-75 w-100\">\n              <Graph\n                className=\"h-100 w-100\"\n                handlePressOnAlbum={node => this.switchToAlbum(node.data().label)}\n                handlePressOnMusician={node => this.switchToMusician(node.data().label)}\n                handlePressOnTrack={() => {}}\n                handlePressOnInstrument={() => {}}\n                type=\"special\"\n                data={data}/>\n              </div>\n          </div>\n        </div>\n        {/* starting navigation and content container */}\n      </div>\n    );\n  }\n\n  /**\n   * after users press to filter results this function\n   * gives you wanted data type should be displayed\n   */\n  chooseFilterType = (type) => {\n    this.setState({type: type});\n  }\n  /**\n   * switching to album\n   */\n  switchToAlbum = (albumName) => {\n    this.props.history.push(`/album?n=${albumName}`);\n  }\n  /**\n   * processing new search\n   * @param {String} query - search query\n   */\n  processSearch = (query) => {\n    this.setState({type: ''});\n    this.props.history.push(`/search?q=${query}`)\n  }\n  /**\n   * switching to musician\n   */\n  switchToMusician = (musicianName) => {\n    var albumName = albumService.getFirstAlbum().id;\n    var query = queryString.stringify({n: albumName, m: musicianName});\n    this.props.history.push(`/album?${query}`);\n  }\n}\n\nexport default withRouter(SearchRoute);\n","import React from 'react';\nimport './App.css';\nimport 'font-awesome/css/font-awesome.min.css';\n\nimport { AlbumRoute, HomeRoute, SearchRoute } from './routes';\nimport {\n  BrowserRouter as Router,\n  Route, Switch\n} from \"react-router-dom\";\n\n/**\n * @author Pavlo Rozbytskyi\n * This is main component of the application. \n *   \n * There are three main routes in this application: \n * 1. HomeRoute, 2. AlbumsRoute, 3. SearchRoute\n * Switching between routes is possible with React Router\n */\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n\n    this.state = {\n      //state variables needed to figure out active route\n      showHome: true,\n      showAlbums: false,\n      showSearch: false,\n    }\n  } \n\n  render () {\n    return (\n      // react router with three main routes\n      <Router>\n        <Switch>\n          <Route path='/album' render={() => <AlbumRoute \n            showAlbums={this.showAlbums}\n            showSearchScreen={this.showSearchScreen}/>\n          }/>\n          <Route path='/search' render={() => <SearchRoute \n            showSearchScreen={this.showSearchScreen}/>\n          }/>\n          <Route path='/' render={() => <HomeRoute\n            //if component is not active, it won't be rendered\n            showHome={this.showHome}\n            showAlbums={this.showAlbums}/>\n          }/>\n        </Switch>\n      </Router>\n    );\n  }\n  // hiding all screens except albums screen\n  showAlbums = () => {\n    this.setState({\n      showHome: false,\n      showAlbums: true,\n      showSearch: false,\n    });\n  }\n  // hiding all screens except home screen\n  showHome = () => {\n    this.setState({\n      showHome: true,\n      showAlbums: false,\n      showSearch: false,\n    });\n  }\n  // hiding all screens except search screen\n  showSearchScreen = () => {\n    this.setState({\n      showHome: false,\n      showAlbums: false,\n      showSearch: true,\n    });\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}